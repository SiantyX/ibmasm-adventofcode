00:06:05 program   MZ390 START USING z390 V1.7.07 ON J2SE 17.0.1 12/02/22
MZ390I Copyright 2011 Automated Software Tools Corporation
MZ390I z390 is licensed under GNU General Public License
MZ390I program = X:\Documents\projects\ibmasm\20221201\program.asm
MZ390I options = 
  sysmac(+X:\Downloads\z390_v1707\z390_v1707\mac) 
  syscpy(+X:\Downloads\z390_v1707\z390_v1707\mac) AMODE24 DUMP TRACE TRACEALL
GBLC &SYSADATA_DSN(1)
GBLC &SYSADATA_MEMBER(1)
GBLC &SYSADATA_VOLUME(1)
GBLC &SYSASM(1)
GBLB &SYSEDF(1)
GBLB &SYSCICS(1)
GBLB &SYSCICS_EPILOG(1)
GBLB &SYSCICS_PROLOG(1)
GBLC &SYSCLOCK(1)
GBLC &SYSDATC(1)
GBLC &SYSDATE(1)
GBLC &SYSIN_DSN(1)
GBLC &SYSIN_MEMBER(1)
GBLC &SYSIN_VOLUME(1)
GBLC &SYSJOB(1)
GBLC &SYSLIB_DSN(1)
GBLC &SYSLIB_MEMBER(1)
GBLC &SYSLIB_VOLUME(1)
GBLC &SYSLIN_DSN(1)
GBLC &SYSLIN_MEMBER(1)
GBLC &SYSLIN_VOLUME(1)
GBLC &SYSMAC(1)
GBLC &SYSM_HSEV(1)
GBLC &SYSM_SEV(1)
GBLB &SYSOPT_DBCS(1)
GBLC &SYSOPT_OPTABLE(1)
GBLB &SYSOPT_RENT(1)
GBLB &SYSOPT_XOBJECT(1)
GBLC &SYSPARM(1)
GBLC &SYSPRINT_DSN(1)
GBLC &SYSPRINT_MEMBER(1)
GBLC &SYSPRINT_VOLUME(1)
GBLC &SYSPUNCH_DSN(1)
GBLC &SYSPUNCH_MEMBER(1)
GBLC &SYSPUNCH_VOLUME(1)
GBLC &SYSSEQF(1)
GBLC &SYSSTEP(1)
GBLC &SYSSTMT(1)
GBLC &SYSTEM_ID(1)
GBLC &SYSTERM_DSN(1)
GBLC &SYSTERM_MEMBER(1)
GBLC &SYSTERM_VOLUME(1)
GBLC &SYSTEM_JAVA(1)
GBLC &SYSTIME(1)
GBLC &SYSTRACE(1)
GBLC &SYSVER(1)
GBLA &SYSZVSAM(1)
LOADING FILE X:\Documents\projects\ibmasm\20221201\program.asm
LOADING MAC LINE          YREGS
LOADING MAC LINE PROGRAM  CSECT
LOADING MAC LINE          STM   R14,R12,12(R13)         SPARA ANROPANDES REGISTER
LOADING MAC LINE          LR    R12,R15                 SÄTT UPP EGET BAS-REGISTER
LOADING MAC LINE          USING PROGRAM,R12
LOADING MAC LINE          ST    R13,SAVE+4              SPARA ANROPANDES SAVE ADRESS
LOADING MAC LINE          LR    R14,R13
LOADING MAC LINE          LA    R13,SAVE                R13 ÄR DENNA MODULS SAVE-AREA
LOADING MAC LINE          ST    R13,8(,R14)             SPARA I ANROPANDES SAVE-AREA
LOADING MAC LINE          OPEN  (SYSOUT,(OUTPUT),SYSIN,(INPUT))
LOADING MAC LINE * -------------------------------------------------------------------
LOADING MAC LINE LOOP     EQU   *
LOADING MAC LINE          GET   SYSIN
LOADING MAC LINE          MVC   OUTAREA(15),0(R1)
LOADING MAC LINE          WTO   MF=(E,WTOBLOCK)
LOADING MAC LINE          J     LOOP
LOADING MAC LINE EOFSYSIN EQU   *
LOADING MAC LINE * --------------------------------------------------------------------
LOADING MAC LINE          CLOSE (SYSOUT,,SYSIN)
LOADING MAC LINE          L     R13,SAVE+4              ANROPANDES SAVE AREA
LOADING MAC LINE          LM    R14,R12,12(R13)         ÅTERSTÄLL REGISTREN
LOADING MAC LINE          LA    R15,0                   LÄMNA RETURKOD 0 I REG 15
LOADING MAC LINE          BR    R14
LOADING MAC LINE * --------------------------------------------------------------------
LOADING MAC LINE SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=FT,LRECL=80,EODAD=EOFSYSIN
LOADING MAC LINE SYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,RECFM=FT,LRECL=80
LOADING MAC LINE 
LOADING MAC LINE SAVE     DC    18F'0'                  MODULENS EGEN SAVE-AREA
LOADING MAC LINE TEST     DC    CL80'HEJHHEJ'
LOADING MAC LINE OUTAREA  WTO   'xxxxxxxxxxxxxxxx',MF=L
LOADING MAC LINE 
LOADING MAC LINE          END
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
OPEN CODE     1     (1/1) *MCALL #=     1 LV= 1          YREGS 
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\YREGS.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE          YREGS
LOADING MAC LINE R0       EQU   0
LOADING MAC LINE R1       EQU   1
LOADING MAC LINE R2       EQU   2
LOADING MAC LINE R3       EQU   3
LOADING MAC LINE R4       EQU   4
LOADING MAC LINE R5       EQU   5
LOADING MAC LINE R6       EQU   6
LOADING MAC LINE R7       EQU   7
LOADING MAC LINE R8       EQU   8
LOADING MAC LINE R9       EQU   9
LOADING MAC LINE R10      EQU   10
LOADING MAC LINE R11      EQU   11
LOADING MAC LINE R12      EQU   12
LOADING MAC LINE R13      EQU   13
LOADING MAC LINE R14      EQU   14
LOADING MAC LINE R15      EQU   15
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
YREGS         3     (2/3)+R0       EQU   0
YREGS         4     (2/4)+R1       EQU   1
YREGS         5     (2/5)+R2       EQU   2
YREGS         6     (2/6)+R3       EQU   3
YREGS         7     (2/7)+R4       EQU   4
YREGS         8     (2/8)+R5       EQU   5
YREGS         9     (2/9)+R6       EQU   6
YREGS        10    (2/10)+R7       EQU   7
YREGS        11    (2/11)+R8       EQU   8
YREGS        12    (2/12)+R9       EQU   9
YREGS        13    (2/13)+R10      EQU   10
YREGS        14    (2/14)+R11      EQU   11
YREGS        15    (2/15)+R12      EQU   12
YREGS        16    (2/16)+R13      EQU   13
YREGS        17    (2/17)+R14      EQU   14
YREGS        18    (2/18)+R15      EQU   15
YREGS        18    (2/18)+*MEXIT #=     1 LV= 1 YREGS
OPEN CODE     2     (1/2) PROGRAM  CSECT 
OPEN CODE     3     (1/3)          STM   R14,R12,12(R13)         SPARA ANROPANDES REGISTER
OPEN CODE     4     (1/4)          LR    R12,R15                 SÄTT UPP EGET BAS-REGISTER
OPEN CODE     5     (1/5)          USING PROGRAM,R12
OPEN CODE     6     (1/6)          ST    R13,SAVE+4              SPARA ANROPANDES SAVE ADRESS
OPEN CODE     7     (1/7)          LR    R14,R13
OPEN CODE     8     (1/8)          LA    R13,SAVE                R13 ÄR DENNA MODULS SAVE-AREA
OPEN CODE     9     (1/9)          ST    R13,8(,R14)             SPARA I ANROPANDES SAVE-AREA
OPEN CODE    10    (1/10) *MCALL #=     2 LV= 1          OPEN  (SYSOUT,(OUTPUT),SYSIN,(INPUT))
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\OPEN.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation                *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package        *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license   *
LOADING MAC LINE .* Author - Melvyn Maltz                                              *
LOADING MAC LINE .* Date   - 04/11/21                                                  *
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE .* 04/11/21 zVSAM Dummy front end for hybrid \MAC using ZVSAM(n)      *
LOADING MAC LINE .*          zVSAM(0) defaults to 1                                    *
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE &N       OPEN  &DCBLIST,&MF=I,&MODE=24,&TYPE=
LOADING MAC LINE .*
LOADING MAC LINE &SVSAM   SETA  &SYSZVSAM
LOADING MAC LINE .******OVERRIDE CODE UNTIL ZVSAM V2 OPEN IS FULLY IMPLEMENTED
LOADING MAC LINE &SVSAM   SETA  1
LOADING MAC LINE .******END OF OVERRIDE
LOADING MAC LINE .*       AIF   (&SYSZVSAM EQ 0)
LOADING MAC LINE  AIF (NOT(&SYSZVSAM EQ 0)).AIF_1_1
LOADING MAC LINE &SVSAM   SETA 1
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_1_1 ANOP
LOADING MAC LINE &N       OPEN&SVSAM &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
LOADING MAC LINE .*
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
OPEN         14         &SVSAM   SETA  &SYSZVSAM
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
LCLA &SVSAM(1)
EXP TOKEN=&SYSZVSAM
PUSHING VAR - &SYSZVSAM FROM=&SYSZVSAM
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=    1 OP= PUSHV(&SYSZVSAM)=1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    2 OP= STORV(&SVSAM)=1
SETA LCLA &SVSAM(1)= 1
OPEN         16         &SVSAM   SETA  1
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    3 OP= PUSHA()=1
  GEN  PC LOC=    4 OP= STORV(&SVSAM)=1
SETA LCLA &SVSAM(1)= 1
OPEN         18          AIF (NOT(&SYSZVSAM EQ 0)).AIF_1_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&SYSZVSAM EQ 0)).AIF_1_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&SYSZVSAM EQ 0)).AIF_1_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&SYSZVSAM EQ 0)).AIF_1_1
EXP TOKEN=&SYSZVSAM
PUSHING VAR - &SYSZVSAM FROM=&SYSZVSAM EQ 0)).AIF_1_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=    5 OP= PUSHV(&SYSZVSAM)=1
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 0)).AIF_1_1
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 1 EQ 0 = 0
  GEN  PC LOC=    6 OP= COMPEQ(1,0)=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=    7 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=    8 OP= AIF(1)=.AIF_1_1 BRANCH
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MODE
PUSHING VAR - &MODE FROM=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
OPEN         21         &N       OPEN&SVSAM &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
OPEN         21    (3/21)+*MCALL #=     3 LV= 2          OPEN1      (SYSOUT,(OUTPUT),SYSIN,(INPUT)),MF=I,MODE=24,TYPE=
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\OPEN1.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/30/05                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION*
LOADING MAC LINE .* 04/11/21 zVSAM RENAMED TO OPEN1 FOR HYBRID \MAC                   *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       OPEN1 &DCBLIST,&MF=I,&MODE=31,&TYPE=      FLAG TYPE J AS UNSUPPORTED
LOADING MAC LINE &N       ZOPEN &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MODE
PUSHING VAR - &MODE FROM=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
OPEN1        16         &N       ZOPEN &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
OPEN1        16    (4/16)+*MCALL #=     4 LV= 3          ZOPEN (SYSOUT,(OUTPUT),SYSIN,(INPUT)),MF=I,MODE=24,TYPE=
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\ZOPEN.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 04/15/08                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 10/20/05 RPI27 - issue error for any undefined operands
LOADING MAC LINE .* 11/13/05 RPI88 - correct test for DCB register parm
LOADING MAC LINE .* 11/13/05 RPI96 - add additional validity checking for parms
LOADING MAC LINE .* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
LOADING MAC LINE .* 04/10/06 RPI244 IGNORE OR ISSUE UNSUPPORTED ERROR, SUPPORT (REG)
LOADING MAC LINE .* 06/14/07 RPI 641 DEFAULT MF=I
LOADING MAC LINE .* 08/03/07 RPI 668 check return code for each svc and exit if nz
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 09/16/07 RPI 697 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 09/16/07 RPI 682 CHANGE TO GEN DCBD REQUIRED FOR OPEN FLAG REFS
LOADING MAC LINE .* 10/14/07 RPI 718 ISSUE MNOTE ERR FOR NN OR RNN WITHOUT ((REG),OPT)
LOADING MAC LINE .* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
LOADING MAC LINE .* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
LOADING MAC LINE .* 09/11/08 RPI 764 allow OPEN (reg) for input, use ZSTRMAC
LOADING MAC LINE .* 04/19/09 RPI 1021 support MF=L/E
LOADING MAC LINE .* 04/19/09 RPI 1023 support lower case options
LOADING MAC LINE .* 05/19/09 RPI 1029 remove SPM macros for compatibility
LOADING MAC LINE .* 05/28/09 RPI 1045 change to only assume register form if (..)
LOADING MAC LINE .* 01/26/11 RPI 1139 remove space from SETC expression
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       ZOPEN &DCBLIST,&MF=I,&MODE=31,&TYPE=      FLAG TYPE J AS UNSUPPORTED
LOADING MAC LINE .*       AIF   (N'&SYSLIST NE 1)
LOADING MAC LINE  AIF (NOT(N'&SYSLIST NE 1)).AIF_2_1
LOADING MAC LINE                MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(2)'
LOADING MAC LINE                MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_2_1 ANOP
LOADING MAC LINE .*
LOADING MAC LINE .* OPEN 1 OR MORE FILES DEFINED BY DCB'S WITH INPUT, OUTPUT, UPDATE
LOADING MAC LINE .* OPTIONS
LOADING MAC LINE .*
LOADING MAC LINE .*       AIF   ('&TYPE' NE '')
LOADING MAC LINE  AIF (NOT('&TYPE' NE '')).AIF_3_1
LOADING MAC LINE                MNOTE 12,'OPEN TYPE= NOT SUPPORTED'
LOADING MAC LINE                MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_3_1 ANOP
LOADING MAC LINE &NP SETA  N'&DCBLIST
LOADING MAC LINE .*       AIF   ('&MF' EQ 'L')
LOADING MAC LINE  AIF (NOT('&MF' EQ 'L')).AIF_4_1
LOADING MAC LINE .*             AIF   ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_5_1
LOADING MAC LINE &N DS    0F
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_5_1 ANOP
LOADING MAC LINE &I SETA  1
LOADING MAC LINE .*             AWHILE (&I LE &NP)
LOADING MAC LINE .AWH_1_T ANOP
LOADING MAC LINE  AIF (NOT(&I LE &NP)).AWH_1_E
LOADING MAC LINE &DCB SETC '&DCBLIST(&I)'
LOADING MAC LINE &OPTION SETC (UPPER '&DCBLIST(&I+1,1)')  RPI 1023
LOADING MAC LINE .*                 AIF ('&DCB'(1,1) EQ '(') RPI 764 RPI 1045
LOADING MAC LINE  AIF (NOT('&DCB'(1,1) EQ '(')).AIF_6_1
LOADING MAC LINE                        MNOTE 8,'ZOPEN REGISTER FORM NOT ALLOWED'
LOADING MAC LINE                        MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_6_1 ANOP
LOADING MAC LINE .*                 AIF (&I+2 GE &NP)
LOADING MAC LINE  AIF (NOT(&I+2 GE &NP)).AIF_7_1
LOADING MAC LINE &VL SETC 'X''80000000''+'
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_7_E
LOADING MAC LINE .AIF_7_1 ANOP
LOADING MAC LINE &VL SETC ''
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_7_E ANOP
LOADING MAC LINE .*                 AIF ('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')
LOADING MAC LINE  AIF (NOT('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_8_1
LOADING MAC LINE                        DC  A(&VL&DCB,DCBOFLGS_GM)   READ ONLY
LOADING MAC LINE .*                 AELSEIF   ('&OPTION' EQ 'OUTPUT')
LOADING MAC LINE  AGO .AIF_8_E
LOADING MAC LINE .AIF_8_1 ANOP
LOADING MAC LINE  AIF (NOT('&OPTION' EQ 'OUTPUT')).AIF_8_2
LOADING MAC LINE                        DC  A(&VL&DCB,DCBOFLGS_PM)   WRITE ONLY
LOADING MAC LINE .*                 AELSEIF   ('&OPTION' EQ 'UPDATE')
LOADING MAC LINE  AGO .AIF_8_E
LOADING MAC LINE .AIF_8_2 ANOP
LOADING MAC LINE  AIF (NOT('&OPTION' EQ 'UPDATE')).AIF_8_3
LOADING MAC LINE                        DC  A(&VL&DCB,DCBOFLGS_RW)   READ AND WRITE
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_8_E
LOADING MAC LINE .AIF_8_3 ANOP
LOADING MAC LINE                        MNOTE 12,'OPEN OPTION NOT SUPPORTED - &OPTION'
LOADING MAC LINE                        MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_8_E ANOP
LOADING MAC LINE &I SETA &I+2
LOADING MAC LINE .*             AEND
LOADING MAC LINE  AGO .AWH_1_T
LOADING MAC LINE .AWH_1_E ANOP
LOADING MAC LINE .*       AELSEIF ('&MF(1)' EQ 'E')
LOADING MAC LINE  AGO .AIF_4_E
LOADING MAC LINE .AIF_4_1 ANOP
LOADING MAC LINE  AIF (NOT('&MF(1)' EQ 'E')).AIF_4_2
LOADING MAC LINE .*             AIF   ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_9_1
LOADING MAC LINE &N DS    0H
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_9_1 ANOP
LOADING MAC LINE .*             AIF  ('&MF(2)'(1,1) EQ '(')
LOADING MAC LINE  AIF (NOT('&MF(2)'(1,1) EQ '(')).AIF_10_1
LOADING MAC LINE                     ZOPTLR 14,&MF(2)
LOADING MAC LINE .*             AELSE
LOADING MAC LINE  AGO .AIF_10_E
LOADING MAC LINE .AIF_10_1 ANOP
LOADING MAC LINE                     LA     14,&MF(2)
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_10_E ANOP
LOADING MAC LINE                B    ZOPEN_DO_LOOP&SYSNDX
LOADING MAC LINE ZOPEN_DO_UNTIL&SYSNDX DS 0H
LOADING MAC LINE                LTR  1,1
LOADING MAC LINE                BM   ZOPEN_DO_EXIT&SYSNDX
LOADING MAC LINE                LTR  15,15
LOADING MAC LINE                BNZ  ZOPEN_DO_EXIT&SYSNDX
LOADING MAC LINE ZOPEN_DO_LOOP&SYSNDX DS 0H
LOADING MAC LINE                     L   1,0(14)
LOADING MAC LINE                     L   0,4(14)
LOADING MAC LINE                     SVC 19
LOADING MAC LINE                     AHI 14,8
LOADING MAC LINE                B    ZOPEN_DO_UNTIL&SYSNDX
LOADING MAC LINE ZOPEN_DO_EXIT&SYSNDX DS 0H
LOADING MAC LINE .*       AELSEIF ('&MF'  EQ 'I')
LOADING MAC LINE  AGO .AIF_4_E
LOADING MAC LINE .AIF_4_2 ANOP
LOADING MAC LINE  AIF (NOT('&MF'  EQ 'I')).AIF_4_3
LOADING MAC LINE .*             AIF   ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_11_1
LOADING MAC LINE &N DS    0H
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_11_1 ANOP
LOADING MAC LINE &I SETA  1
LOADING MAC LINE .*             AWHILE (&I LE &NP)
LOADING MAC LINE .AWH_2_T ANOP
LOADING MAC LINE  AIF (NOT(&I LE &NP)).AWH_2_E
LOADING MAC LINE &DCB SETC '&DCBLIST(&I)'
LOADING MAC LINE &OPTION SETC UPPER('&DCBLIST(&I+1,1)')  RPI 1023
LOADING MAC LINE .*                 AIF ('&DCB'(1,1) EQ '(') RPI 764 RPI 1045
LOADING MAC LINE  AIF (NOT('&DCB'(1,1) EQ '(')).AIF_12_1
LOADING MAC LINE                        ZOPTLR 1,&DCB(1)
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_12_E
LOADING MAC LINE .AIF_12_1 ANOP
LOADING MAC LINE                        LA     1,&DCB
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_12_E ANOP
LOADING MAC LINE .*                 AIF ('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')
LOADING MAC LINE  AIF (NOT('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
LOADING MAC LINE                        LA  0,DCBOFLGS_GM   READ ONLY
LOADING MAC LINE .*                 AELSEIF   ('&OPTION' EQ 'OUTPUT')
LOADING MAC LINE  AGO .AIF_13_E
LOADING MAC LINE .AIF_13_1 ANOP
LOADING MAC LINE  AIF (NOT('&OPTION' EQ 'OUTPUT')).AIF_13_2
LOADING MAC LINE                        LA  0,DCBOFLGS_PM   WRITE ONLY
LOADING MAC LINE .*                 AELSEIF   ('&OPTION' EQ 'UPDATE')
LOADING MAC LINE  AGO .AIF_13_E
LOADING MAC LINE .AIF_13_2 ANOP
LOADING MAC LINE  AIF (NOT('&OPTION' EQ 'UPDATE')).AIF_13_3
LOADING MAC LINE                        LA  0,DCBOFLGS_RW   READ AND WRITE
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_13_E
LOADING MAC LINE .AIF_13_3 ANOP
LOADING MAC LINE                        MNOTE 12,'OPEN OPTION NOT SUPPORTED - &OPTION'
LOADING MAC LINE                        MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_13_E ANOP
LOADING MAC LINE                    SVC   19 OPEN R0=TYPE,R1=DCB/ACB
LOADING MAC LINE .*                 AIF    (&NP GT 2)
LOADING MAC LINE  AIF (NOT(&NP GT 2)).AIF_14_1
LOADING MAC LINE                          LTR   15,15
LOADING MAC LINE                          BNZ   Z390_OPEN_EXIT&SYSNDX RPI 668
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_14_1 ANOP
LOADING MAC LINE &I SETA &I+2
LOADING MAC LINE .*             AEND
LOADING MAC LINE  AGO .AWH_2_T
LOADING MAC LINE .AWH_2_E ANOP
LOADING MAC LINE .*             AIF   (&NP GT 2)
LOADING MAC LINE  AIF (NOT(&NP GT 2)).AIF_15_1
LOADING MAC LINE Z390_OPEN_EXIT&SYSNDX EQU *
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_15_1 ANOP
LOADING MAC LINE .*       AELSE
LOADING MAC LINE  AGO .AIF_4_E
LOADING MAC LINE .AIF_4_3 ANOP
LOADING MAC LINE                MNOTE 12,'OPEN MF= TYPE NOT SUPPORTED &MF'
LOADING MAC LINE                MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_4_E ANOP
LOADING MAC LINE          DCBD
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
ZOPEN        33          AIF (NOT(N'&SYSLIST NE 1)).AIF_2_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(N'&SYSLIST NE 1)).AIF_2_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(N'&SYSLIST NE 1)).AIF_2_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST NE 1)).AIF_2_1
EXP TOKEN=N'
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST NE 1)).AIF_2_1
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST NE 1)).AIF_2_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=    9 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=4 VARS=1 PREV OP = N' NEXT OP = NE
EXP OPS=4 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=   10 OP= N'('&SYSLIST')=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 1)).AIF_2_1
EXP TOKEN= 
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE 1 NE 1 = 0
  GEN  PC LOC=   11 OP= COMPNE(1,1)=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   12 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   13 OP= AIF(1)=.AIF_2_1 BRANCH
 
ZOPEN        41          AIF (NOT('&TYPE' NE '')).AIF_3_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&TYPE' NE '')).AIF_3_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&TYPE' NE '')).AIF_3_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&TYPE' NE '')).AIF_3_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&TYPE' NE '')).AIF_3_1
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE' NE '')).AIF_3_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   14 OP= PUSHV(&TYPE)=''
STRING CONCAT - &TYPE =  FROM=&TYPE' NE '')).AIF_3_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '')).AIF_3_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='')).AIF_3_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=   15 OP= COMPNE('','')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   16 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   17 OP= AIF(1)=.AIF_3_1 BRANCH
 
ZOPEN        45         &NP SETA  N'&DCBLIST
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP
LCLA &NP(1)
EXP TOKEN=N'
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = N'
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 10
PUSHING OP - N' FROM='&DCBLIST
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   18 OP= PUSHV(&DCBLIST)='(SYSOUT,(OUTPUT),SYSIN,(INPUT))'
EXP OPS=1 VARS=1 PREV OP = N' NEXT OP = ~
EXP OPS=1 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 6
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=   19 OP= N'('(SYSOUT,(OUTPUT),SYSIN,(INPUT))')=4
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   20 OP= STORV(&NP)=4
SETA LCLA &NP(1)= 4
ZOPEN        46          AIF (NOT('&MF' EQ 'L')).AIF_4_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF' EQ 'L')).AIF_4_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF' EQ 'L')).AIF_4_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' EQ 'L')).AIF_4_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' EQ 'L')).AIF_4_1
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' EQ 'L')).AIF_4_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   21 OP= PUSHV(&MF)='I'
STRING CONCAT - &MF = I FROM=&MF' EQ 'L')).AIF_4_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'L')).AIF_4_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='L')).AIF_4_1
EXP TOKEN=L'
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'L' = 0
  GEN  PC LOC=   22 OP= COMPEQ('I','L')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   23 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   24 OP= AIF(1)=.AIF_4_1 BRANCH
 
ZOPEN        75          AIF (NOT('&MF(1)' EQ 'E')).AIF_4_2
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF(1)' EQ 'E')).AIF_4_2
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF(1)' EQ 'E')).AIF_4_2
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(1)' EQ 'E')).AIF_4_2
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(1)' EQ 'E')).AIF_4_2
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(1)' EQ 'E')).AIF_4_2
  GEN  PC LOC=   25 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   26 OP= PUSHV(&MF)='I'
PUSHING OP - ) FROM=(1)' EQ 'E')).AIF_4_2
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=5 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=5 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=I
POP OP=)
  GEN  PC LOC=   27 OP= PUSHA()=1
  GEN  PC LOC=   28 OP= SUBLST('I',1)='I'
  GEN  PC LOC=   29 OP= CONCAT('','I')='I'
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'E')).AIF_4_2
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='E')).AIF_4_2
EXP TOKEN=E
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'E' = 0
  GEN  PC LOC=   30 OP= COMPEQ('I','E')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   31 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   32 OP= AIF(1)=.AIF_4_2 BRANCH
 
ZOPEN        97          AIF (NOT('&MF'  EQ 'I')).AIF_4_3
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF'  EQ 'I')).AIF_4_3
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF'  EQ 'I')).AIF_4_3
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF'  EQ 'I')).AIF_4_3
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF'  EQ 'I')).AIF_4_3
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF'  EQ 'I')).AIF_4_3
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   33 OP= PUSHV(&MF)='I'
STRING CONCAT - &MF = I FROM=&MF'  EQ 'I')).AIF_4_3
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'I')).AIF_4_3
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='I')).AIF_4_3
EXP TOKEN=I'
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'I' = 1
  GEN  PC LOC=   34 OP= COMPEQ('I','I')=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=   35 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   36 OP= AIF(0)=.AIF_4_3 NO BRANCH
ZOPEN        98          AIF (NOT('&N' NE '')).AIF_11_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&N' NE '')).AIF_11_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&N' NE '')).AIF_11_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&N' NE '')).AIF_11_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&N' NE '')).AIF_11_1
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N' NE '')).AIF_11_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   37 OP= PUSHV(&N)=''
STRING CONCAT - &N =  FROM=&N' NE '')).AIF_11_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '')).AIF_11_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='')).AIF_11_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=   38 OP= COMPNE('','')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   39 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   40 OP= AIF(1)=.AIF_11_1 BRANCH
 
ZOPEN       101         &I SETA  1
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I
LCLA &I(1)
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   41 OP= PUSHA()=1
  GEN  PC LOC=   42 OP= STORV(&I)=1
SETA LCLA &I(1)= 1
ZOPEN       102          AIF (NOT(&I LE &NP)).AWH_2_E
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&I LE &NP)).AWH_2_E
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&I LE &NP)).AWH_2_E
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&I LE &NP)).AWH_2_E
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I LE &NP)).AWH_2_E
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   43 OP= PUSHV(&I)=1
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E &NP)).AWH_2_E
EXP TOKEN= 
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP)).AWH_2_E
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   44 OP= PUSHV(&NP)=4
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 1 LE 4 = 1
  GEN  PC LOC=   45 OP= COMPLE(1,4)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=   46 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   47 OP= AIF(0)=.AWH_2_E NO BRANCH
ZOPEN       103         &DCB SETC '&DCBLIST(&I)'
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
LCLC &DCB(1)
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCBLIST(&I)'
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST(&I)'
  GEN  PC LOC=   48 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   49 OP= PUSHV(&DCBLIST)='(SYSOUT,(OUTPUT),SYSIN,(INPUT))'
PUSHING OP - ) FROM=(&I)'
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I)'
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   50 OP= PUSHV(&I)=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=SYSOUT
POP OP=)
  GEN  PC LOC=   51 OP= SUBLST('(SYSOUT,(OUTPUT),SYSIN,(INPUT))',1)='SYSOUT'
  GEN  PC LOC=   52 OP= CONCAT('','SYSOUT')='SYSOUT'
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   53 OP= STORV(&DCB)='SYSOUT'
SETC LCLC &DCB(1)= SYSOUT
ZOPEN       104         &OPTION SETC UPPER('&DCBLIST(&I+1,1)')  RPI 1023
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION
LCLC &OPTION(1)
EXP TOKEN=UPPER
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = UPPER
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 10
PUSHING OP - UPPER FROM=R('&DCBLIST(&I+1,1)')  RPI 1023
EXP TOKEN=(
EXP OPS=1 VARS=0 PREV OP = UPPER NEXT OP = (
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 10 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DCBLIST(&I+1,1)')  RPI 1023
EXP TOKEN='
EXP OPS=2 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCBLIST(&I+1,1)')  RPI 1023
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST(&I+1,1)')  RPI 1023
  GEN  PC LOC=   54 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   55 OP= PUSHV(&DCBLIST)='(SYSOUT,(OUTPUT),SYSIN,(INPUT))'
PUSHING OP - ) FROM=(&I+1,1)')  RPI 1023
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I+1,1)')  RPI 1023
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   56 OP= PUSHV(&I)=1
EXP TOKEN=+
EXP OPS=4 VARS=3 PREV OP = ) NEXT OP = +
EXP OPS=4 VARS=3 ACTION = 3 PREV CLASS = 4 NEXT CLASS = 1
PUSHING OP - + FROM=+1,1)')  RPI 1023
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=5 VARS=4 PREV OP = + NEXT OP = ,
EXP OPS=5 VARS=4 ACTION = 1 PREV CLASS = 1 NEXT CLASS = 9
POP OP=+
ADD 2 = 1 + 1
  GEN  PC LOC=   57 OP= ADD(1,1)=2
EXP OPS=4 VARS=3 PREV OP = ) NEXT OP = ,
EXP OPS=4 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 9
SUBLIST PARM=(OUTPUT)
  GEN  PC LOC=   58 OP= SUBLST('(SYSOUT,(OUTPUT),SYSIN,(INPUT))',2)='(OUTPUT)'
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=4 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=4 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=OUTPUT
POP OP=)
  GEN  PC LOC=   59 OP= PUSHA()=1
  GEN  PC LOC=   60 OP= SUBLST('(OUTPUT)',1)='OUTPUT'
  GEN  PC LOC=   61 OP= CONCAT('','OUTPUT')='OUTPUT'
EXP TOKEN='
EXP OPS=3 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN= 
EXP OPS=1 VARS=1 PREV OP = UPPER NEXT OP = ~
EXP OPS=1 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 6
POP OP=UPPER
 PREFIX OP=UPPERVARS=1
UPPER OUTPUT = UPPER OUTPUT
  GEN  PC LOC=   62 OP= UPPER('OUTPUT')='OUTPUT'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   63 OP= STORV(&OPTION)='OUTPUT'
SETC LCLC &OPTION(1)= OUTPUT
ZOPEN       105          AIF (NOT('&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB'(1,1) EQ '(')).AIF_12_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   64 OP= PUSHV(&DCB)='SYSOUT'
STRING CONCAT - &DCB = SYSOUT FROM=&DCB'(1,1) EQ '(')).AIF_12_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=4 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=4 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=   65 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=4 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=4 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING SYSOUT(1,1)
  GEN  PC LOC=   66 OP= PUSHA()=1
  GEN  PC LOC=   67 OP= SUBSTR('SYSOUT',1,1)='S'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '(')).AIF_12_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='(')).AIF_12_1
EXP TOKEN=(
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'S' EQ '(' = 0
  GEN  PC LOC=   68 OP= COMPEQ('S','(')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   69 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   70 OP= AIF(1)=.AIF_12_1 BRANCH
 
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZOPEN       108                                LA     1,&DCB
ZOPEN       108   (5/108)+                       LA     1,SYSOUT
ZOPEN       110          AIF (NOT('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   71 OP= PUSHV(&OPTION)='OUTPUT'
STRING CONCAT - &OPTION = OUTPUT FROM=&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='' OR '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=OR
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = OR
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 13
POP OP=EQ
COMPARE 'OUTPUT' EQ '' = 0
  GEN  PC LOC=   72 OP= COMPEQ('OUTPUT','')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = OR
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 13
PUSHING OP - OR FROM=R '&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = OR NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 8
PUSHING OP - ' FROM='&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION' EQ 'INPUT')).AIF_13_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   73 OP= PUSHV(&OPTION)='OUTPUT'
STRING CONCAT - &OPTION = OUTPUT FROM=&OPTION' EQ 'INPUT')).AIF_13_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=4 VARS=2 PREV OP = OR NEXT OP = EQ
EXP OPS=4 VARS=2 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'INPUT')).AIF_13_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = EQ NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='INPUT')).AIF_13_1
EXP TOKEN=INPUT
EXP TOKEN='
EXP OPS=6 VARS=3 PREV OP = ' NEXT OP = '
EXP OPS=6 VARS=3 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=5 VARS=3 PREV OP = EQ NEXT OP = )
EXP OPS=5 VARS=3 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'OUTPUT' EQ 'INPUT' = 0
  GEN  PC LOC=   74 OP= COMPEQ('OUTPUT','INPUT')=0
EXP OPS=4 VARS=2 PREV OP = OR NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 15 PREV CLASS = 13 NEXT CLASS = 4
POP OP=OR
OR 0 = 0 OR 0
  GEN  PC LOC=   75 OP= OR(0,0)=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=   76 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   77 OP= AIF(1)=.AIF_13_1 BRANCH
 
ZOPEN       112          AIF (NOT('&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION' EQ 'OUTPUT')).AIF_13_2
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   78 OP= PUSHV(&OPTION)='OUTPUT'
STRING CONCAT - &OPTION = OUTPUT FROM=&OPTION' EQ 'OUTPUT')).AIF_13_2
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'OUTPUT')).AIF_13_2
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='OUTPUT')).AIF_13_2
EXP TOKEN=OUTPUT
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'OUTPUT' EQ 'OUTPUT' = 1
  GEN  PC LOC=   79 OP= COMPEQ('OUTPUT','OUTPUT')=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=   80 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   81 OP= AIF(0)=.AIF_13_2 NO BRANCH
ZOPEN       113   (5/113)+                       LA  0,DCBOFLGS_PM   WRITE ONLY
ZOPEN       114          AGO .AIF_13_E
 
ZOPEN       120   (5/120)+                   SVC   19 OPEN R0=TYPE,R1=DCB/ACB
ZOPEN       121          AIF (NOT(&NP GT 2)).AIF_14_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&NP GT 2)).AIF_14_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&NP GT 2)).AIF_14_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&NP GT 2)).AIF_14_1
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP GT 2)).AIF_14_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   82 OP= PUSHV(&NP)=4
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 2)).AIF_14_1
EXP TOKEN= 
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 4 GT 2 = 1
  GEN  PC LOC=   83 OP= COMPGT(4,2)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=   84 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   85 OP= AIF(0)=.AIF_14_1 NO BRANCH
ZOPEN       122   (5/122)+                         LTR   15,15
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZOPEN       123                                  BNZ   Z390_OPEN_EXIT&SYSNDX RPI 668
ZOPEN       123   (5/123)+                         BNZ   Z390_OPEN_EXIT0004 RPI 668
ZOPEN       125         &I SETA &I+2
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I+2
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   86 OP= PUSHV(&I)=1
EXP TOKEN=+
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = +
EXP OPS=0 VARS=1 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 1
PUSHING OP - + FROM=+2
EXP TOKEN=2
PUSHING SDT - 2
EXP OPS=1 VARS=2 PREV OP = + NEXT OP = ~
EXP OPS=1 VARS=2 ACTION = 1 PREV CLASS = 1 NEXT CLASS = 6
POP OP=+
ADD 3 = 1 + 2
  GEN  PC LOC=   87 OP= ADD(1,2)=3
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   88 OP= STORV(&I)=3
SETA LCLA &I(1)= 3
ZOPEN       126          AGO .AWH_2_T
 
ZOPEN       102          AIF (NOT(&I LE &NP)).AWH_2_E
  EXEC PC LOC=   43 OP= PUSHV(&I)=3
  EXEC PC LOC=   44 OP= PUSHV(&NP)=4
COMPARE 3 ~ 4 = 1
  EXEC PC LOC=   45 OP= COMPLE(3,4)=1
NOT 0 = NOT 1
  EXEC PC LOC=   46 OP= NOT(1)=0
  EXEC PC LOC=   47 OP= AIF(0)=.AWH_2_E NO BRANCH
ZOPEN       103         &DCB SETC '&DCBLIST(&I)'
  EXEC PC LOC=   48 OP= PUSHC()=''
  EXEC PC LOC=   49 OP= PUSHV(&DCBLIST)='(SYSOUT,(OUTPUT),SYSIN,(INPUT))'
  EXEC PC LOC=   50 OP= PUSHV(&I)=3
SUBLIST PARM=SYSIN
  EXEC PC LOC=   51 OP= SUBLST('(SYSOUT,(OUTPUT),SYSIN,(INPUT))',3)='SYSIN'
  EXEC PC LOC=   52 OP= CONCAT('','SYSIN')='SYSIN'
SETC LCLC &DCB(1)= SYSIN
  EXEC PC LOC=   53 OP= STORV(&DCB)='SYSIN'
ZOPEN       104         &OPTION SETC UPPER('&DCBLIST(&I+1,1)')  RPI 1023
  EXEC PC LOC=   54 OP= PUSHC()=''
  EXEC PC LOC=   55 OP= PUSHV(&DCBLIST)='(SYSOUT,(OUTPUT),SYSIN,(INPUT))'
  EXEC PC LOC=   56 OP= PUSHV(&I)=3
ADD 4 = 3 + 1
  EXEC PC LOC=   57 OP= ADD(3,1)=4
SUBLIST PARM=(INPUT)
  EXEC PC LOC=   58 OP= SUBLST('(SYSOUT,(OUTPUT),SYSIN,(INPUT))',4)='(INPUT)'
  EXEC PC LOC=   59 OP= PUSHA()=1
SUBLIST PARM=INPUT
  EXEC PC LOC=   60 OP= SUBLST('(INPUT)',1)='INPUT'
  EXEC PC LOC=   61 OP= CONCAT('','INPUT')='INPUT'
UPPER INPUT = UPPER INPUT
  EXEC PC LOC=   62 OP= UPPER('INPUT')='INPUT'
SETC LCLC &OPTION(1)= INPUT
  EXEC PC LOC=   63 OP= STORV(&OPTION)='INPUT'
ZOPEN       105          AIF (NOT('&DCB'(1,1) EQ '(')).AIF_12_1
  EXEC PC LOC=   64 OP= PUSHV(&DCB)='SYSIN'
  EXEC PC LOC=   65 OP= PUSHA()=1
  EXEC PC LOC=   66 OP= PUSHA()=1
SUBSTRING SYSIN(1,1)
  EXEC PC LOC=   67 OP= SUBSTR('SYSIN',1,1)='S'
COMPARE 'S' ~ '(' = 0
  EXEC PC LOC=   68 OP= COMPEQ('S','(')=0
NOT 1 = NOT 0
  EXEC PC LOC=   69 OP= NOT(0)=1
  EXEC PC LOC=   70 OP= AIF(1)=.AIF_12_1 BRANCH
 
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZOPEN       108                                LA     1,&DCB
ZOPEN       108   (5/108)+                       LA     1,SYSIN
ZOPEN       110          AIF (NOT('&OPTION' EQ '' OR '&OPTION' EQ 'INPUT')).AIF_13_1
  EXEC PC LOC=   71 OP= PUSHV(&OPTION)='INPUT'
COMPARE 'INPUT' ~ '' = 0
  EXEC PC LOC=   72 OP= COMPEQ('INPUT','')=0
  EXEC PC LOC=   73 OP= PUSHV(&OPTION)='INPUT'
COMPARE 'INPUT' ~ 'INPUT' = 1
  EXEC PC LOC=   74 OP= COMPEQ('INPUT','INPUT')=1
OR 1 = 0 OR 1
  EXEC PC LOC=   75 OP= OR(0,1)=1
NOT 0 = NOT 1
  EXEC PC LOC=   76 OP= NOT(1)=0
  EXEC PC LOC=   77 OP= AIF(0)=.AIF_13_1 NO BRANCH
ZOPEN       111   (5/111)+                       LA  0,DCBOFLGS_GM   READ ONLY
ZOPEN       112          AGO .AIF_13_E
 
ZOPEN       120   (5/120)+                   SVC   19 OPEN R0=TYPE,R1=DCB/ACB
ZOPEN       121          AIF (NOT(&NP GT 2)).AIF_14_1
  EXEC PC LOC=   82 OP= PUSHV(&NP)=4
COMPARE 4 ~ 2 = 1
  EXEC PC LOC=   83 OP= COMPGT(4,2)=1
NOT 0 = NOT 1
  EXEC PC LOC=   84 OP= NOT(1)=0
  EXEC PC LOC=   85 OP= AIF(0)=.AIF_14_1 NO BRANCH
ZOPEN       122   (5/122)+                         LTR   15,15
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZOPEN       123                                  BNZ   Z390_OPEN_EXIT&SYSNDX RPI 668
ZOPEN       123   (5/123)+                         BNZ   Z390_OPEN_EXIT0004 RPI 668
ZOPEN       125         &I SETA &I+2
  EXEC PC LOC=   86 OP= PUSHV(&I)=3
ADD 5 = 3 + 2
  EXEC PC LOC=   87 OP= ADD(3,2)=5
SETA LCLA &I(1)= 5
  EXEC PC LOC=   88 OP= STORV(&I)=5
ZOPEN       126          AGO .AWH_2_T
 
ZOPEN       102          AIF (NOT(&I LE &NP)).AWH_2_E
  EXEC PC LOC=   43 OP= PUSHV(&I)=5
  EXEC PC LOC=   44 OP= PUSHV(&NP)=4
COMPARE 5 ~ 4 = 0
  EXEC PC LOC=   45 OP= COMPLE(5,4)=0
NOT 1 = NOT 0
  EXEC PC LOC=   46 OP= NOT(0)=1
  EXEC PC LOC=   47 OP= AIF(1)=.AWH_2_E BRANCH
 
ZOPEN       127          AIF (NOT(&NP GT 2)).AIF_15_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&NP GT 2)).AIF_15_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&NP GT 2)).AIF_15_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&NP GT 2)).AIF_15_1
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP GT 2)).AIF_15_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   89 OP= PUSHV(&NP)=4
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 2)).AIF_15_1
EXP TOKEN= 
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 4 GT 2 = 1
  GEN  PC LOC=   90 OP= COMPGT(4,2)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=   91 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   92 OP= AIF(0)=.AIF_15_1 NO BRANCH
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZOPEN       128   (5/128)+Z390_OPEN_EXIT0004    EQU *
ZOPEN       130          AGO .AIF_4_E
 
ZOPEN       134   (5/134)+*MCALL #=     5 LV= 4          DCBD 
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\DCBD.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2006 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* MAINTENANCE
LOADING MAC LINE .* 10/12/05 ADD DCBAREA AND DCBDSNAM FIELDS
LOADING MAC LINE .* 10/20/05 RPI  27 - issue error for any undefined operands
LOADING MAC LINE .* 11/13/05 RPI  88 - add DCBID id EBCDIC/ASCII ID for I/O verification
LOADING MAC LINE .* 04/10/06 RPI 244  support RECFM A/M, DSORG=, unsupported DEVD=
LOADING MAC LINE .* 05/05/06 RPI 281  add DCBDCBE field
LOADING MAC LINE .* 03/12/07 RPI 558  add glba z390_dcbd to only define once for DCB/DTF
LOADING MAC LINE .* 03/12/07 RPI 587  add DCBBLKSIF and DCBLRECLF 32 bit len extension
LOADING MAC LINE .* 04/13/07 RPI 591  correct to handle DCBD before any CSECT/DSECT
LOADING MAC LINE .* 05/17/07 RPI 625  correct to handle LOCTR as well as CSECT/DSECT
LOADING MAC LINE .* 09/10/08 RPI 764  add  DCBMACRF_GL and PL locate support labels
LOADING MAC LINE .* 09/10/08 RPI 906  move DCBOFLGS_OPEN to X'10', add DCBOFOPN X'10'
LOADING MAC LINE .* 02/04/09 RPI 989  add DCBEODA (note DCBEODAD is same 31 bit addr)
LOADING MAC LINE .* 02/06/09 RPI 989  add DCBRECF,DCBRECBR,DCBRECFU bits (RECU never on)
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE          DCBD  &DSORG=,&DEVD=       IGNORE
LOADING MAC LINE .*
LOADING MAC LINE .* IF DCBD ALREADY DEFINED EXIT NOW
LOADING MAC LINE .*
LOADING MAC LINE          GBLB  &Z390_DCBD                       RPI 591
LOADING MAC LINE          GBLC  &Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
LOADING MAC LINE          AIF   (&Z390_DCBD).EXIT                RPI 591
LOADING MAC LINE &Z390_DCBD      SETB 1                          RPI 591
LOADING MAC LINE &Z390_DCBD_NAME SETC '&SYSLOC'                  RPI 591 RPI 625
LOADING MAC LINE &Z390_DCBD_TYPE SETC '&SYSSTYP'
LOADING MAC LINE          AIF   (N'&SYSLIST EQ 0).NPOK
LOADING MAC LINE          MNOTE 12,'UNSUPPORTED OPERANDS - &SYSLIST(1)'
LOADING MAC LINE .NPOK    ANOP
LOADING MAC LINE .*
LOADING MAC LINE .*       DATA CONTROL BLOCK DSECT
LOADING MAC LINE .*
LOADING MAC LINE IHADCB   DSECT
LOADING MAC LINE          ORG   IHADCB+X'00'
LOADING MAC LINE DCBID    DS    CL4            DCB ID RPI88
LOADING MAC LINE          ORG   IHADCB+X'1A'
LOADING MAC LINE DCBDSORG DS    X              DATA SET ORGANIZATION
LOADING MAC LINE DCBDSORG_PS EQU X'40'           PHYSICAL SEQUENTIAL
LOADING MAC LINE DCBDSORG_DA EQU X'20'           DIRECT ACCESS
LOADING MAC LINE          ORG   IHADCB+X'1C'
LOADING MAC LINE DCBIOBAD DS    A              INPUT/OUTPUT BLOCK (TIOT TABLE INDEX)
LOADING MAC LINE          ORG   IHADCB+X'20'
LOADING MAC LINE DCBEODA  DS    0A ADDRESS OF END OF FILE EXIT 31 BIT VS 24 RPI 989
LOADING MAC LINE DCBEODAD DS    A ADDRESS OF END OF FILE EXIT  31 BIT VS 24
LOADING MAC LINE          ORG   IHADCB+X'24'
LOADING MAC LINE DCBRECFM DS    X              RECORD FORMAT
LOADING MAC LINE DCBRECF      EQU X'80'           FIXED  RPI 989
LOADING MAC LINE DCBRECFM_F   EQU X'80'           FIXED
LOADING MAC LINE DCBRECFM_FA  EQU X'80'           FIXED
LOADING MAC LINE DCBRECFM_FM  EQU X'80'           FIXED
LOADING MAC LINE DCBRECFM_V   EQU X'40'           VARIABLE
LOADING MAC LINE DCBRECFM_VA  EQU X'40'           VARIABLE
LOADING MAC LINE DCBRECFM_VM  EQU X'40'           VARIABLE
LOADING MAC LINE DCBRECFM_FB  EQU X'90'           FIXED BLOCKED
LOADING MAC LINE DCBRECBR     EQU X'10'           BLOCKED RECORDS RPI 989
LOADING MAC LINE DCBRECFM_FBA EQU X'90'           FIXED BLOCKED
LOADING MAC LINE DCBRECFM_FBM EQU X'90'           FIXED BLOCKED
LOADING MAC LINE DCBRECFM_VB  EQU X'50'           VARIABLE BLOCKED
LOADING MAC LINE DCBRECFM_VBA EQU X'50'           VARIABLE BLOCKED
LOADING MAC LINE DCBRECFM_VBM EQU X'50'           VARIABLE BLOCKED
LOADING MAC LINE DCBRECFM_FT  EQU X'A0'           FIXED ASCII TEXT
LOADING MAC LINE DCBRECFM_VT  EQU X'60'           VARIABLE ASCII TEXT
LOADING MAC LINE DCBRECU      EQU X'C0'           UNDEFINED RCDS NOT SUPPORTED RPI 989
LOADING MAC LINE          ORG   IHADCB+X'28'
LOADING MAC LINE DCBDDNAM DS    CL8            DDNAME > ENV VAR > FILE NAME
LOADING MAC LINE          ORG   IHADCB+X'30'
LOADING MAC LINE DCBOFLGS DS    X              OPEN FLAGS
LOADING MAC LINE DCBOFLGS_OPEN EQU X'10'          FILE OPEN (X'80' > X'10' RPI 906)_
LOADING MAC LINE DCBOFOPN      EQU X'10'          FILE OPEN RPI 906
LOADING MAC LINE DCBOFLGS_GM   EQU X'40'          READ  ALLOWED
LOADING MAC LINE DCBOFLGS_PM   EQU X'20'          WRITE ALLOWED
LOADING MAC LINE DCBOFLGS_GL   EQU X'40'          READ  ALLOWED
LOADING MAC LINE DCBOFLGS_PL   EQU X'20'          WRITE ALLOWED
LOADING MAC LINE DCBOFLGS_R    EQU X'40'          READ  ALLOWED
LOADING MAC LINE DCBOFLGS_W    EQU X'20'          WRITE ALLOWED
LOADING MAC LINE DCBOFLGS_RW   EQU X'60'          READ AND WRITE ALLOWED
LOADING MAC LINE          ORG   IHADCB+X'32'
LOADING MAC LINE DCBMACRF DS    H              MACRO REFERENCE ACCESS TYPE
LOADING MAC LINE DCBMACRF_GM EQU X'5000'         GET MOVE   QSAM
LOADING MAC LINE DCBMACRF_PM EQU X'0050'         PUT MOVE   QSAM
LOADING MAC LINE DCBMACRF_GL EQU X'4800'         GET LOCATE QSAM    RPI 764
LOADING MAC LINE DCBMACRF_PL EQU X'0048'         PUT LOCATE QSAM    RPI 764
LOADING MAC LINE DCBMACRF_R  EQU X'2000'         READ  RANDOM BDAM
LOADING MAC LINE DCBMACRF_W  EQU X'0020'         WRITE RANDOM BDAM
LOADING MAC LINE DCBMACRF_RW EQU X'2020'         READ/WRITE RANDOM BDAM
LOADING MAC LINE          ORG   IHADCB+X'38'
LOADING MAC LINE DCBSYNAD DS    A              ERROR EXIT
LOADING MAC LINE          ORG   IHADCB+X'3C'
LOADING MAC LINE DCBBLKSIF DS   F              BLOCK SIZE    RPI 587 32 BIT BLOCK SIZE
LOADING MAC LINE          ORG   IHADCB+X'3E'
LOADING MAC LINE DCBBLKSI DS    H              BLOCK SIZE    (ALSO UNBLOCKED MAX RECORD)
LOADING MAC LINE          ORG   IHADCB+X'50'
LOADING MAC LINE DCBLRECLF DS   F              RECORD LENGTH RPI 587 32 BIT RECORD LEN
LOADING MAC LINE          ORG   IHADCB+X'52'
LOADING MAC LINE DCBLRECL DS    H              RECORD LENGTH (MAY BE ZERO FOR UNBLOCKED)
LOADING MAC LINE          ORG   IHADCB+X'58'
LOADING MAC LINE DCBREC   DS    A      X'58'   ADDRESS OF USER SUPPLIED RECORD AREA
LOADING MAC LINE DCBDSNAM DS    A      X'5C'   ADDRESS OF USER SUPPLIED DSN FILE SPEC
LOADING MAC LINE DCBDCBE  DS    A      X'60'   ADDRESS OF DCBE EODAD/SYNAD  RPI 281
LOADING MAC LINE DCBIO    DS    F      X'64'   TOTAL DCB IO OPERATIONS SINCE OPEN
LOADING MAC LINE DCBLEN   EQU   *-IHADCB
LOADING MAC LINE           AIF  ('&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
LOADING MAC LINE &Z390_DCBD_NAME &Z390_DCBD_TYPE                    RPI 591
LOADING MAC LINE .EXIT    MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
DCBD         28                  GBLB  &Z390_DCBD                       RPI 591
EXP TOKEN=&Z390_DCBD
PUSHING VAR - &Z390_DCBD FROM=&Z390_DCBD                       RPI 591
GBLB &Z390_DCBD(1)
DCBD         29                  GBLC  &Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
GBLC &Z390_DCBD_NAME(1)
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE  RPI 591
GBLC &Z390_DCBD_TYPE(1)
DCBD         30                  AIF   (&Z390_DCBD).EXIT                RPI 591
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&Z390_DCBD).EXIT                RPI 591
EXP TOKEN=&Z390_DCBD
PUSHING VAR - &Z390_DCBD FROM=&Z390_DCBD).EXIT                RPI 591
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   93 OP= PUSHV(&Z390_DCBD)=0
EXP TOKEN=)
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   94 OP= AIF(0)=.EXIT NO BRANCH
DCBD         31         &Z390_DCBD      SETB 1                          RPI 591
EXP TOKEN=&Z390_DCBD
PUSHING VAR - &Z390_DCBD FROM=&Z390_DCBD
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN= 
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   95 OP= PUSHA()=1
  GEN  PC LOC=   96 OP= STORV(&Z390_DCBD)=1
SETB GBLB &Z390_DCBD(1)= 1
DCBD         32         &Z390_DCBD_NAME SETC '&SYSLOC'                  RPI 591 RPI 625
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&SYSLOC'                  RPI 591 RPI 625
EXP TOKEN=&SYSLOC
PUSHING VAR - &SYSLOC FROM=&SYSLOC'                  RPI 591 RPI 625
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   97 OP= PUSHV(&SYSLOC)='PROGRAM'
STRING CONCAT - &SYSLOC = PROGRAM FROM=&SYSLOC'                  RPI 591 RPI 625
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   98 OP= STORV(&Z390_DCBD_NAME)='PROGRAM'
SETC GBLC &Z390_DCBD_NAME(1)= PROGRAM
DCBD         33         &Z390_DCBD_TYPE SETC '&SYSSTYP'
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&SYSSTYP'
EXP TOKEN=&SYSSTYP
PUSHING VAR - &SYSSTYP FROM=&SYSSTYP'
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=   99 OP= PUSHV(&SYSSTYP)='CSECT'
STRING CONCAT - &SYSSTYP = CSECT FROM=&SYSSTYP'
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  100 OP= STORV(&Z390_DCBD_TYPE)='CSECT'
SETC GBLC &Z390_DCBD_TYPE(1)= CSECT
DCBD         34                  AIF   (N'&SYSLIST EQ 0).NPOK
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST EQ 0).NPOK
EXP TOKEN=N'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST EQ 0).NPOK
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST EQ 0).NPOK
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  101 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=2 VARS=1 PREV OP = N' NEXT OP = EQ
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  102 OP= N'('&SYSLIST')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 0).NPOK
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 0 EQ 0 = 1
  GEN  PC LOC=  103 OP= COMPEQ(0,0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  104 OP= AIF(1)=.NPOK BRANCH
 
DCBD         40    (6/40)+IHADCB   DSECT 
DCBD         41    (6/41)+         ORG   IHADCB+X'00'
DCBD         42    (6/42)+DCBID    DS    CL4            DCB ID RPI88
DCBD         43    (6/43)+         ORG   IHADCB+X'1A'
DCBD         44    (6/44)+DCBDSORG DS    X              DATA SET ORGANIZATION
DCBD         45    (6/45)+DCBDSORG_PS EQU X'40'           PHYSICAL SEQUENTIAL
DCBD         46    (6/46)+DCBDSORG_DA EQU X'20'           DIRECT ACCESS
DCBD         47    (6/47)+         ORG   IHADCB+X'1C'
DCBD         48    (6/48)+DCBIOBAD DS    A              INPUT/OUTPUT BLOCK (TIOT TABLE INDEX)
DCBD         49    (6/49)+         ORG   IHADCB+X'20'
DCBD         50    (6/50)+DCBEODA  DS    0A ADDRESS OF END OF FILE EXIT 31 BIT VS 24 RPI 989
DCBD         51    (6/51)+DCBEODAD DS    A ADDRESS OF END OF FILE EXIT  31 BIT VS 24
DCBD         52    (6/52)+         ORG   IHADCB+X'24'
DCBD         53    (6/53)+DCBRECFM DS    X              RECORD FORMAT
DCBD         54    (6/54)+DCBRECF      EQU X'80'           FIXED  RPI 989
DCBD         55    (6/55)+DCBRECFM_F   EQU X'80'           FIXED
DCBD         56    (6/56)+DCBRECFM_FA  EQU X'80'           FIXED
DCBD         57    (6/57)+DCBRECFM_FM  EQU X'80'           FIXED
DCBD         58    (6/58)+DCBRECFM_V   EQU X'40'           VARIABLE
DCBD         59    (6/59)+DCBRECFM_VA  EQU X'40'           VARIABLE
DCBD         60    (6/60)+DCBRECFM_VM  EQU X'40'           VARIABLE
DCBD         61    (6/61)+DCBRECFM_FB  EQU X'90'           FIXED BLOCKED
DCBD         62    (6/62)+DCBRECBR     EQU X'10'           BLOCKED RECORDS RPI 989
DCBD         63    (6/63)+DCBRECFM_FBA EQU X'90'           FIXED BLOCKED
DCBD         64    (6/64)+DCBRECFM_FBM EQU X'90'           FIXED BLOCKED
DCBD         65    (6/65)+DCBRECFM_VB  EQU X'50'           VARIABLE BLOCKED
DCBD         66    (6/66)+DCBRECFM_VBA EQU X'50'           VARIABLE BLOCKED
DCBD         67    (6/67)+DCBRECFM_VBM EQU X'50'           VARIABLE BLOCKED
DCBD         68    (6/68)+DCBRECFM_FT  EQU X'A0'           FIXED ASCII TEXT
DCBD         69    (6/69)+DCBRECFM_VT  EQU X'60'           VARIABLE ASCII TEXT
DCBD         70    (6/70)+DCBRECU      EQU X'C0'           UNDEFINED RCDS NOT SUPPORTED RPI 989
DCBD         71    (6/71)+         ORG   IHADCB+X'28'
DCBD         72    (6/72)+DCBDDNAM DS    CL8            DDNAME > ENV VAR > FILE NAME
DCBD         73    (6/73)+         ORG   IHADCB+X'30'
DCBD         74    (6/74)+DCBOFLGS DS    X              OPEN FLAGS
DCBD         75    (6/75)+DCBOFLGS_OPEN EQU X'10'          FILE OPEN (X'80' > X'10' RPI 906)_
DCBD         76    (6/76)+DCBOFOPN      EQU X'10'          FILE OPEN RPI 906
DCBD         77    (6/77)+DCBOFLGS_GM   EQU X'40'          READ  ALLOWED
DCBD         78    (6/78)+DCBOFLGS_PM   EQU X'20'          WRITE ALLOWED
DCBD         79    (6/79)+DCBOFLGS_GL   EQU X'40'          READ  ALLOWED
DCBD         80    (6/80)+DCBOFLGS_PL   EQU X'20'          WRITE ALLOWED
DCBD         81    (6/81)+DCBOFLGS_R    EQU X'40'          READ  ALLOWED
DCBD         82    (6/82)+DCBOFLGS_W    EQU X'20'          WRITE ALLOWED
DCBD         83    (6/83)+DCBOFLGS_RW   EQU X'60'          READ AND WRITE ALLOWED
DCBD         84    (6/84)+         ORG   IHADCB+X'32'
DCBD         85    (6/85)+DCBMACRF DS    H              MACRO REFERENCE ACCESS TYPE
DCBD         86    (6/86)+DCBMACRF_GM EQU X'5000'         GET MOVE   QSAM
DCBD         87    (6/87)+DCBMACRF_PM EQU X'0050'         PUT MOVE   QSAM
DCBD         88    (6/88)+DCBMACRF_GL EQU X'4800'         GET LOCATE QSAM    RPI 764
DCBD         89    (6/89)+DCBMACRF_PL EQU X'0048'         PUT LOCATE QSAM    RPI 764
DCBD         90    (6/90)+DCBMACRF_R  EQU X'2000'         READ  RANDOM BDAM
DCBD         91    (6/91)+DCBMACRF_W  EQU X'0020'         WRITE RANDOM BDAM
DCBD         92    (6/92)+DCBMACRF_RW EQU X'2020'         READ/WRITE RANDOM BDAM
DCBD         93    (6/93)+         ORG   IHADCB+X'38'
DCBD         94    (6/94)+DCBSYNAD DS    A              ERROR EXIT
DCBD         95    (6/95)+         ORG   IHADCB+X'3C'
DCBD         96    (6/96)+DCBBLKSIF DS   F              BLOCK SIZE    RPI 587 32 BIT BLOCK SIZE
DCBD         97    (6/97)+         ORG   IHADCB+X'3E'
DCBD         98    (6/98)+DCBBLKSI DS    H              BLOCK SIZE    (ALSO UNBLOCKED MAX RECORD)
DCBD         99    (6/99)+         ORG   IHADCB+X'50'
DCBD        100   (6/100)+DCBLRECLF DS   F              RECORD LENGTH RPI 587 32 BIT RECORD LEN
DCBD        101   (6/101)+         ORG   IHADCB+X'52'
DCBD        102   (6/102)+DCBLRECL DS    H              RECORD LENGTH (MAY BE ZERO FOR UNBLOCKED)
DCBD        103   (6/103)+         ORG   IHADCB+X'58'
DCBD        104   (6/104)+DCBREC   DS    A      X'58'   ADDRESS OF USER SUPPLIED RECORD AREA
DCBD        105   (6/105)+DCBDSNAM DS    A      X'5C'   ADDRESS OF USER SUPPLIED DSN FILE SPEC
DCBD        106   (6/106)+DCBDCBE  DS    A      X'60'   ADDRESS OF DCBE EODAD/SYNAD  RPI 281
DCBD        107   (6/107)+DCBIO    DS    F      X'64'   TOTAL DCB IO OPERATIONS SINCE OPEN
DCBD        108   (6/108)+DCBLEN   EQU   *-IHADCB
DCBD        110                   AIF  ('&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  105 OP= PUSHV(&Z390_DCBD_NAME)='PROGRAM'
STRING CONCAT - &Z390_DCBD_NAME = PROGRAM FROM=&Z390_DCBD_NAME' EQ '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='' OR '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=OR
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = OR
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 13
POP OP=EQ
COMPARE 'PROGRAM' EQ '' = 0
  GEN  PC LOC=  106 OP= COMPEQ('PROGRAM','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = OR
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 13
PUSHING OP - OR FROM=R '&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = OR NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 8
PUSHING OP - ' FROM='&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE' EQ '').EXIT
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  107 OP= PUSHV(&Z390_DCBD_TYPE)='CSECT'
STRING CONCAT - &Z390_DCBD_TYPE = CSECT FROM=&Z390_DCBD_TYPE' EQ '').EXIT
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=2 VARS=2 PREV OP = OR NEXT OP = EQ
EXP OPS=2 VARS=2 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').EXIT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = EQ NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').EXIT
EXP TOKEN='
EXP OPS=4 VARS=3 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=3 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = EQ NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'CSECT' EQ '' = 0
  GEN  PC LOC=  108 OP= COMPEQ('CSECT','')=0
EXP OPS=2 VARS=2 PREV OP = OR NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 15 PREV CLASS = 13 NEXT CLASS = 4
POP OP=OR
OR 0 = 0 OR 0
  GEN  PC LOC=  109 OP= OR(0,0)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  110 OP= AIF(0)=.EXIT NO BRANCH
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCBD        111   (6/111)+PROGRAM         CSECT                              RPI 591
DCBD        111   (6/111)+*MEXIT #=     5 LV= 4 DCBD
DCBD        111   (6/111)+*MEXIT #=     4 LV= 3 ZOPEN
DCBD        111   (6/111)+*MEXIT #=     3 LV= 2 OPEN1
DCBD        111   (6/111)+*MEXIT #=     2 LV= 1 OPEN
OPEN CODE    11    (1/11) * -------------------------------------------------------------------
OPEN CODE    12    (1/12) LOOP     EQU   *
OPEN CODE    13    (1/13) *MCALL #=     6 LV= 1          GET   SYSIN
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\GET.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/30/05                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* MAINTENANCE
LOADING MAC LINE .* 10/12/05 ADD USE OF DCBREC IF RECORD NOT SPECIFIED
LOADING MAC LINE .* 10/20/05 RPI27 - issue error for any undefined operands
LOADING MAC LINE .* 10/20/05 RPI38 - check for register conflicts
LOADING MAC LINE .* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
LOADING MAC LINE .* 04/12/06 RPI163 ISSUE MNOTE ERROR FOR TYPE=P
LOADING MAC LINE .* 06/14/07 RPI 641 DEFAULT MF=I
LOADING MAC LINE .* 06/22/07 RPI 644 ADD VSAM RPL SUPPORT VIA SVC 221 R0=1 R1=A(RPL)
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 10/01/07 RPI 709 CORRECT MNOTE TEXT
LOADING MAC LINE .* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
LOADING MAC LINE .*
LOADING MAC LINE .* 04/05/21 zVSAM Added MNOTE for ZVSAM(0)
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       GET   &DCB,&REC,&MF=I,&RPL=,&TYPE=   TYPE=P NOT SUPPORTED
LOADING MAC LINE          AIF   ('&N' EQ '').SKIPDS
LOADING MAC LINE &N       DS    0H
LOADING MAC LINE .SKIPDS  ANOP
LOADING MAC LINE          AIF   ('&MF' NE 'I').ERR3
LOADING MAC LINE          AIF   (N'&SYSLIST LE 2).NPOK
LOADING MAC LINE          MNOTE 12,'GET UNSUPPORTED OPERANDS - &SYSLIST(3)'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .NPOK    ANOP
LOADING MAC LINE          AIF   ('&RPL' NE '').VSAM
LOADING MAC LINE          AIF   ('&TYPE' NE '').ERR1
LOADING MAC LINE          AIF   ('&DCB'(1,1) EQ '(').DCBREG
LOADING MAC LINE          LA    1,&DCB
LOADING MAC LINE          AGO   .CHKREC
LOADING MAC LINE .DCBREG  ANOP
LOADING MAC LINE          ZOPTLR 1,&DCB(1)
LOADING MAC LINE .CHKREC  ANOP
LOADING MAC LINE          AIF   ('&REC' EQ '').RECDEF
LOADING MAC LINE          AIF   ('&REC'(1,1) EQ '(').RECREG
LOADING MAC LINE          LA    0,&REC
LOADING MAC LINE          AGO   .SVC
LOADING MAC LINE .RECREG  ANOP
LOADING MAC LINE          AIF   ('&REC(1)' EQ '1' OR '&REC(1)' EQ 'R1').ERR2
LOADING MAC LINE          ZOPTLR 0,&REC(1)
LOADING MAC LINE          AGO   .SVC
LOADING MAC LINE .RECDEF  ANOP
LOADING MAC LINE          L     0,DCBREC-IHADCB(1)
LOADING MAC LINE .SVC     ANOP
LOADING MAC LINE          SVC  151
LOADING MAC LINE          MEXIT
LOADING MAC LINE .VSAM    ANOP
LOADING MAC LINE .*       AIF   (&SYSZVSAM EQ 0)
LOADING MAC LINE  AIF (NOT(&SYSZVSAM EQ 0)).AIF_16_1
LOADING MAC LINE          MNOTE 15,'GET VSAM MACROS ARE NOT PERMITTED IN THIS PROGRAM'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_16_1 ANOP
LOADING MAC LINE          AIF   ('&RPL'(1,1) EQ '(').RPLREG
LOADING MAC LINE          LA    1,&RPL
LOADING MAC LINE          AGO   .VSVC
LOADING MAC LINE .RPLREG  ANOP
LOADING MAC LINE          ZOPTLR 1,&RPL(1)
LOADING MAC LINE .VSVC    ANOP
LOADING MAC LINE          LA    0,RPLOPGET
LOADING MAC LINE          SVC   121 VSAM GET R0=1 R1=A(RPL)
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR1    MNOTE 12,'GET TYPE= NOT SUPPORTED'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR2    MNOTE 12,'GET RECORD REG INVALID - &REC(1)'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR3    MNOTE 12,'GET MF= NOT SUPPORTED'
LOADING MAC LINE          MEXIT
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
GET          28                  AIF   ('&N' EQ '').SKIPDS
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&N' EQ '').SKIPDS
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N' EQ '').SKIPDS
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  111 OP= PUSHV(&N)=''
STRING CONCAT - &N =  FROM=&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').SKIPDS
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').SKIPDS
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=  112 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  113 OP= AIF(1)=.SKIPDS BRANCH
 
GET          31                  AIF   ('&MF' NE 'I').ERR3
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' NE 'I').ERR3
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' NE 'I').ERR3
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' NE 'I').ERR3
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  114 OP= PUSHV(&MF)='I'
STRING CONCAT - &MF = I FROM=&MF' NE 'I').ERR3
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 'I').ERR3
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='I').ERR3
EXP TOKEN=I'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE 'I' NE 'I' = 0
  GEN  PC LOC=  115 OP= COMPNE('I','I')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  116 OP= AIF(0)=.ERR3 NO BRANCH
GET          32                  AIF   (N'&SYSLIST LE 2).NPOK
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST LE 2).NPOK
EXP TOKEN=N'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST LE 2).NPOK
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST LE 2).NPOK
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  117 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=2 VARS=1 PREV OP = N' NEXT OP = LE
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  118 OP= N'('&SYSLIST')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E 2).NPOK
EXP TOKEN= 
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 1 LE 2 = 1
  GEN  PC LOC=  119 OP= COMPLE(1,2)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  120 OP= AIF(1)=.NPOK BRANCH
 
GET          36                  AIF   ('&RPL' NE '').VSAM
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RPL' NE '').VSAM
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RPL' NE '').VSAM
EXP TOKEN=&RPL
PUSHING VAR - &RPL FROM=&RPL' NE '').VSAM
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  121 OP= PUSHV(&RPL)=''
STRING CONCAT - &RPL =  FROM=&RPL' NE '').VSAM
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '').VSAM
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').VSAM
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  122 OP= COMPNE('','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  123 OP= AIF(0)=.VSAM NO BRANCH
GET          37                  AIF   ('&TYPE' NE '').ERR1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&TYPE' NE '').ERR1
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&TYPE' NE '').ERR1
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE' NE '').ERR1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  124 OP= PUSHV(&TYPE)=''
STRING CONCAT - &TYPE =  FROM=&TYPE' NE '').ERR1
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '').ERR1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').ERR1
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  125 OP= COMPNE('','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  126 OP= AIF(0)=.ERR1 NO BRANCH
GET          38                  AIF   ('&DCB'(1,1) EQ '(').DCBREG
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DCB'(1,1) EQ '(').DCBREG
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCB'(1,1) EQ '(').DCBREG
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB'(1,1) EQ '(').DCBREG
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  127 OP= PUSHV(&DCB)='SYSIN'
STRING CONCAT - &DCB = SYSIN FROM=&DCB'(1,1) EQ '(').DCBREG
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=  128 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING SYSIN(1,1)
  GEN  PC LOC=  129 OP= PUSHA()=1
  GEN  PC LOC=  130 OP= SUBSTR('SYSIN',1,1)='S'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '(').DCBREG
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='(').DCBREG
EXP TOKEN=(
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'S' EQ '(' = 0
  GEN  PC LOC=  131 OP= COMPEQ('S','(')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  132 OP= AIF(0)=.DCBREG NO BRANCH
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
GET          39                  LA    1,&DCB
GET          39    (7/39)+         LA    1,SYSIN
GET          40                  AGO   .CHKREC
 
GET          44                  AIF   ('&REC' EQ '').RECDEF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&REC' EQ '').RECDEF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&REC' EQ '').RECDEF
EXP TOKEN=&REC
PUSHING VAR - &REC FROM=&REC' EQ '').RECDEF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  133 OP= PUSHV(&REC)=''
STRING CONCAT - &REC =  FROM=&REC' EQ '').RECDEF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').RECDEF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').RECDEF
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=  134 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  135 OP= AIF(1)=.RECDEF BRANCH
 
GET          53    (7/53)+         L     0,DCBREC-IHADCB(1)
GET          55    (7/55)+         SVC  151
GET          56                  MEXIT
 
GET          56    (7/56)+*MEXIT #=     6 LV= 1 GET
OPEN CODE    14    (1/14)          MVC   OUTAREA(15),0(R1)
OPEN CODE    15    (1/15) *MCALL #=     7 LV= 1          WTO   MF=(E,WTOBLOCK)
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\WTO.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/30/05                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 10/20/05 RPI27 - issue error for any undefined operands
LOADING MAC LINE .* 10/21/05 RPI41  - add MF=L support
LOADING MAC LINE .* 11/05/05 RPI80  - add missing .ERR1 label
LOADING MAC LINE .* 12/02/05 RPI114 - fix to use more unique labels to avoid dup labels
LOADING MAC LINE .* 12/20/05 RPI143 - allow no pos parms for MF=
LOADING MAC LINE .* 01/05/06 RPI153 - remove duplicate label for MF=L
LOADING MAC LINE .* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
LOADING MAC LINE .* 01/12/06 RPI151 CHANGE BAL TO BRAS FOR USE WITHOUT BASE REG
LOADING MAC LINE .* 04/10/06 RPI244 IGNORE KEYWORDS EXCEPT TEXT= UNSUPPORTED ERROR
LOADING MAC LINE .* 04/25/06 RPI290 ALWAYS GEN LABEL IF ANY, CHECK MF=
LOADING MAC LINE .* 06/14/07 RPI 641 DEFAULT MF=I
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       WTO   &MSG,&TEXT=,&MF=I,&CART=,&CONSID=,&CONSNAME=,&DESC=,&KEY=,&MCSFLAG=,&ROUTCDE=,&TOKEN=       IGNORED
LOADING MAC LINE          AIF   ('&N' EQ '').SKIPDS
LOADING MAC LINE &N       DS    0H
LOADING MAC LINE .SKIPDS  ANOP
LOADING MAC LINE          AIF   (N'&SYSLIST LE 1).NPOK
LOADING MAC LINE          MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(2)'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .NPOK    ANOP
LOADING MAC LINE          AIF   ('&MF' NE 'I').MF
LOADING MAC LINE          AIF   ('&TEXT' NE '').ERR2
LOADING MAC LINE          AIF   ('&MSG' EQ '').ERR3
LOADING MAC LINE &MSGTEXT SETC  '&MSG'
LOADING MAC LINE          AIF   ('&MSG'(1,1) EQ '''').WTOMSG
LOADING MAC LINE          AIF   ('&MSG'(1,2) NE '(''').ERR2
LOADING MAC LINE &MSGTEXT SETC  '&MSG'(2,K'&MSG-2)
LOADING MAC LINE .WTOMSG  ANOP
LOADING MAC LINE          BRAS  1,*+(WTO#&SYSNDX._EOT-*+1)/2*2
LOADING MAC LINE          DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSGTEXT
LOADING MAC LINE WTO#&SYSNDX._EOT EQU *
LOADING MAC LINE          SVC   35
LOADING MAC LINE          MEXIT
LOADING MAC LINE .TEXT    ANOP
LOADING MAC LINE          AIF   ('&TEXT' EQ '').ERR3
LOADING MAC LINE .MF      ANOP
LOADING MAC LINE          AIF   ('&MF' EQ 'L').MFL
LOADING MAC LINE          AIF   ('&MF(1)' NE 'E').ERR1
LOADING MAC LINE          AIF   ('&MF(2)' EQ '').SVC
LOADING MAC LINE          AIF   ('&MF(2)'(1,1) EQ '(').MFEREG
LOADING MAC LINE          LA    1,&MF(2)
LOADING MAC LINE          AGO   .SVC
LOADING MAC LINE .MFEREG  ANOP
LOADING MAC LINE          ZOPTLR 1,&MF(2)
LOADING MAC LINE .SVC     ANOP
LOADING MAC LINE          SVC   35
LOADING MAC LINE          MEXIT
LOADING MAC LINE .MFL     ANOP
LOADING MAC LINE          DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSG
LOADING MAC LINE WTO#&SYSNDX._EOT EQU *
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR1    MNOTE 8,'WTO UNDEFINED TYPE - &MF'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR2    MNOTE 8,'WTO TEXT OPTION NOT SUPPORTED'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR3    MNOTE 8,'WTO MISSING ''MSG'' OR TEXT=INED TYPE - &MF'
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
WTO          34                  AIF   ('&N' EQ '').SKIPDS
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&N' EQ '').SKIPDS
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N' EQ '').SKIPDS
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  136 OP= PUSHV(&N)=''
STRING CONCAT - &N =  FROM=&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').SKIPDS
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').SKIPDS
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=  137 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  138 OP= AIF(1)=.SKIPDS BRANCH
 
WTO          37                  AIF   (N'&SYSLIST LE 1).NPOK
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST LE 1).NPOK
EXP TOKEN=N'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST LE 1).NPOK
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST LE 1).NPOK
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  139 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=2 VARS=1 PREV OP = N' NEXT OP = LE
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  140 OP= N'('&SYSLIST')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E 1).NPOK
EXP TOKEN= 
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 0 LE 1 = 1
  GEN  PC LOC=  141 OP= COMPLE(0,1)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  142 OP= AIF(1)=.NPOK BRANCH
 
WTO          41                  AIF   ('&MF' NE 'I').MF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' NE 'I').MF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' NE 'I').MF
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' NE 'I').MF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  143 OP= PUSHV(&MF)='(E,WTOBLOCK)'
STRING CONCAT - &MF = (E,WTOBLOCK) FROM=&MF' NE 'I').MF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 'I').MF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='I').MF
EXP TOKEN=I'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '(E,WTOBLOCK)' NE 'I' = 1
  GEN  PC LOC=  144 OP= COMPNE('(E,WTOBLOCK)','I')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  145 OP= AIF(1)=.MF BRANCH
 
WTO          57                  AIF   ('&MF' EQ 'L').MFL
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' EQ 'L').MFL
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' EQ 'L').MFL
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' EQ 'L').MFL
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  146 OP= PUSHV(&MF)='(E,WTOBLOCK)'
STRING CONCAT - &MF = (E,WTOBLOCK) FROM=&MF' EQ 'L').MFL
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'L').MFL
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='L').MFL
EXP TOKEN=L'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '(E,WTOBLOCK)' EQ 'L' = 0
  GEN  PC LOC=  147 OP= COMPEQ('(E,WTOBLOCK)','L')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  148 OP= AIF(0)=.MFL NO BRANCH
WTO          58                  AIF   ('&MF(1)' NE 'E').ERR1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(1)' NE 'E').ERR1
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(1)' NE 'E').ERR1
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(1)' NE 'E').ERR1
  GEN  PC LOC=  149 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  150 OP= PUSHV(&MF)='(E,WTOBLOCK)'
PUSHING OP - ) FROM=(1)' NE 'E').ERR1
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=E
POP OP=)
  GEN  PC LOC=  151 OP= PUSHA()=1
  GEN  PC LOC=  152 OP= SUBLST('(E,WTOBLOCK)',1)='E'
  GEN  PC LOC=  153 OP= CONCAT('','E')='E'
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 'E').ERR1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='E').ERR1
EXP TOKEN=E
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE 'E' NE 'E' = 0
  GEN  PC LOC=  154 OP= COMPNE('E','E')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  155 OP= AIF(0)=.ERR1 NO BRANCH
WTO          59                  AIF   ('&MF(2)' EQ '').SVC
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(2)' EQ '').SVC
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(2)' EQ '').SVC
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(2)' EQ '').SVC
  GEN  PC LOC=  156 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  157 OP= PUSHV(&MF)='(E,WTOBLOCK)'
PUSHING OP - ) FROM=(2)' EQ '').SVC
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=WTOBLOCK
POP OP=)
  GEN  PC LOC=  158 OP= PUSHA()=2
  GEN  PC LOC=  159 OP= SUBLST('(E,WTOBLOCK)',2)='WTOBLOCK'
  GEN  PC LOC=  160 OP= CONCAT('','WTOBLOCK')='WTOBLOCK'
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').SVC
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').SVC
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'WTOBLOCK' EQ '' = 0
  GEN  PC LOC=  161 OP= COMPEQ('WTOBLOCK','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  162 OP= AIF(0)=.SVC NO BRANCH
WTO          60                  AIF   ('&MF(2)'(1,1) EQ '(').MFEREG
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(2)'(1,1) EQ '(').MFEREG
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(2)'(1,1) EQ '(').MFEREG
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(2)'(1,1) EQ '(').MFEREG
  GEN  PC LOC=  163 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  164 OP= PUSHV(&MF)='(E,WTOBLOCK)'
PUSHING OP - ) FROM=(2)'(1,1) EQ '(').MFEREG
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=WTOBLOCK
POP OP=)
  GEN  PC LOC=  165 OP= PUSHA()=2
  GEN  PC LOC=  166 OP= SUBLST('(E,WTOBLOCK)',2)='WTOBLOCK'
  GEN  PC LOC=  167 OP= CONCAT('','WTOBLOCK')='WTOBLOCK'
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=  168 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING WTOBLOCK(1,1)
  GEN  PC LOC=  169 OP= PUSHA()=1
  GEN  PC LOC=  170 OP= SUBSTR('WTOBLOCK',1,1)='W'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '(').MFEREG
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='(').MFEREG
EXP TOKEN=(
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'W' EQ '(' = 0
  GEN  PC LOC=  171 OP= COMPEQ('W','(')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  172 OP= AIF(0)=.MFEREG NO BRANCH
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(2)
PUSHING OP - ) FROM=(2)
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=1 VARS=2 PREV OP = ) NEXT OP = )
EXP OPS=1 VARS=2 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=WTOBLOCK
POP OP=)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          61                  LA    1,&MF(2)
WTO          61    (8/61)+         LA    1,WTOBLOCK
WTO          62                  AGO   .SVC
 
WTO          66    (8/66)+         SVC   35
WTO          67                  MEXIT
 
WTO          67    (8/67)+*MEXIT #=     7 LV= 1 WTO
OPEN CODE    16    (1/16)          J     LOOP
OPEN CODE    17    (1/17) EOFSYSIN EQU   *
OPEN CODE    18    (1/18) * --------------------------------------------------------------------
OPEN CODE    19    (1/19) *MCALL #=     8 LV= 1          CLOSE (SYSOUT,,SYSIN)
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\CLOSE.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation                *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package        *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license   *
LOADING MAC LINE .* Author - Melvyn Maltz                                              *
LOADING MAC LINE .* Date   - 04/11/21                                                  *
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE .* 04/11/21 zVSAM Dummy front end for hybrid \MAC using ZVSAM(n)      *
LOADING MAC LINE .*          zVSAM(0) defaults to 1                                    *
LOADING MAC LINE .**********************************************************************
LOADING MAC LINE &N       CLOSE &DCBLIST,&MF=I,&MODE=24,&TYPE=
LOADING MAC LINE .*
LOADING MAC LINE &SVSAM   SETA  &SYSZVSAM
LOADING MAC LINE .******OVERRIDE CODE UNTIL ZVSAM V2 CLOSE IS FULLY IMPLEMENTED
LOADING MAC LINE &SVSAM   SETA  1
LOADING MAC LINE .******END OF OVERRIDE
LOADING MAC LINE .*       AIF   (&SYSZVSAM EQ 0)
LOADING MAC LINE  AIF (NOT(&SYSZVSAM EQ 0)).AIF_17_1
LOADING MAC LINE &SVSAM   SETA 1
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_17_1 ANOP
LOADING MAC LINE &N       CLOSE&SVSAM &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
LOADING MAC LINE .*
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
CLOSE        14         &SVSAM   SETA  &SYSZVSAM
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
LCLA &SVSAM(1)
EXP TOKEN=&SYSZVSAM
PUSHING VAR - &SYSZVSAM FROM=&SYSZVSAM
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  173 OP= PUSHV(&SYSZVSAM)=1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  174 OP= STORV(&SVSAM)=1
SETA LCLA &SVSAM(1)= 1
CLOSE        16         &SVSAM   SETA  1
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  175 OP= PUSHA()=1
  GEN  PC LOC=  176 OP= STORV(&SVSAM)=1
SETA LCLA &SVSAM(1)= 1
CLOSE        18          AIF (NOT(&SYSZVSAM EQ 0)).AIF_17_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&SYSZVSAM EQ 0)).AIF_17_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&SYSZVSAM EQ 0)).AIF_17_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&SYSZVSAM EQ 0)).AIF_17_1
EXP TOKEN=&SYSZVSAM
PUSHING VAR - &SYSZVSAM FROM=&SYSZVSAM EQ 0)).AIF_17_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  177 OP= PUSHV(&SYSZVSAM)=1
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 0)).AIF_17_1
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 1 EQ 0 = 0
  GEN  PC LOC=  178 OP= COMPEQ(1,0)=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  179 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  180 OP= AIF(1)=.AIF_17_1 BRANCH
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&SVSAM
PUSHING VAR - &SVSAM FROM=&SVSAM
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF,MODE=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MODE
PUSHING VAR - &MODE FROM=&MODE,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
CLOSE        21         &N       CLOSE&SVSAM &DCBLIST,MF=&MF,MODE=&MODE,TYPE=&TYPE
CLOSE        21    (9/21)+*MCALL #=     9 LV= 2          CLOSE1      (SYSOUT,,SYSIN),MF=I,MODE=24,TYPE=
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\CLOSE1.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2008 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 04/15/08                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       CLOSE1 &DCBLIST,&MODE=,&MF=I,&TYPE=    IGNORED
LOADING MAC LINE &N       ZCLOSE &DCBLIST,MODE=&MODE,MF=&MF,TYPE=&TYPE
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST,MODE=&MODE,MF=&MF,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MODE
PUSHING VAR - &MODE FROM=&MODE,MF=&MF,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF,TYPE=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&TYPE
PUSHING VAR - &TYPE FROM=&TYPE
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
CLOSE1       15         &N       ZCLOSE &DCBLIST,MODE=&MODE,MF=&MF,TYPE=&TYPE
CLOSE1       15   (10/15)+*MCALL #=    10 LV= 3          ZCLOSE (SYSOUT,,SYSIN),MODE=24,MF=I,TYPE=
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\ZCLOSE.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/30/05                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 10/20/05 RPI27 - issue error for any undefined operands
LOADING MAC LINE .* 11/13/05 RPI88 - correct error in checking for DCB register parm
LOADING MAC LINE .* 11/26/05 RPI112- check for invalid DCB RX form (reg) vs ((reg))
LOADING MAC LINE .* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
LOADING MAC LINE .* 04/10/06 RPI244 support (reg) and ignore other keywords
LOADING MAC LINE .* 06/14/07 RPI 641 DEFAULT MF=I
LOADING MAC LINE .* 08/03/07 RPI 668 check return code for each svc and exit if nz
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 10/14/07 RPI 718 ISSUE MNOTE ERR FOR NN OR RNN WITHOUT ((REG),OPT)
LOADING MAC LINE .* 04/15/08 RPI 838 CHANGE OPEN, CLOSE, READ, WRITE TO CALL Z VERSION
LOADING MAC LINE .* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
LOADING MAC LINE .* 09/12/08 RPI 764 upgrade to ZSTRMAC and allow CLOSE (reg)
LOADING MAC LINE .* 04/22/09 RPI 1021 add MF=L/E and cleanup reg support
LOADING MAC LINE .* 05/19/09 RPI 1029 remove SPM macro code for compatibility
LOADING MAC LINE .* 05/28/09 RPI 1045 change to only assume reg form if (...)
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       ZCLOSE &DCBLIST,&MODE=,&MF=I,&TYPE=    IGNORED
LOADING MAC LINE .*       AIF   (N'&SYSLIST GT 1)
LOADING MAC LINE  AIF (NOT(N'&SYSLIST GT 1)).AIF_18_1
LOADING MAC LINE                MNOTE 12,'CLOSE UNSUPPORTED OPERANDS - &SYSLIST(2)'
LOADING MAC LINE                MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_18_1 ANOP
LOADING MAC LINE &NP SETA  N'&DCBLIST
LOADING MAC LINE .*       AIF   ('&MF' EQ 'L')
LOADING MAC LINE  AIF (NOT('&MF' EQ 'L')).AIF_19_1
LOADING MAC LINE .*
LOADING MAC LINE .* LIST FORM
LOADING MAC LINE .*
LOADING MAC LINE .*             AIF ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_20_1
LOADING MAC LINE &N DS    0F
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_20_1 ANOP
LOADING MAC LINE &I SETA  1
LOADING MAC LINE .*             AWHILE (&I LE &NP)
LOADING MAC LINE .AWH_3_T ANOP
LOADING MAC LINE  AIF (NOT(&I LE &NP)).AWH_3_E
LOADING MAC LINE &DCB SETC  '&DCBLIST(&I)'
LOADING MAC LINE &OPTION SETC  '&DCBLIST(&I+1)'
LOADING MAC LINE .*                 AIF ('&DCB'(1,1) EQ '(')  RPI 764 RPI 1045
LOADING MAC LINE  AIF (NOT('&DCB'(1,1) EQ '(')).AIF_21_1
LOADING MAC LINE                        MNOTE 8,'ZCLOSE REG FORM NOT ALLOWED'
LOADING MAC LINE                        MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_21_1 ANOP
LOADING MAC LINE .*                 AIF   ('&OPTION' NE '')
LOADING MAC LINE  AIF (NOT('&OPTION' NE '')).AIF_22_1
LOADING MAC LINE                          MNOTE 12,'CLOSE OPTION NOT SUPPORTED - &OPTION'
LOADING MAC LINE                          MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_22_1 ANOP
LOADING MAC LINE .*                 AIF   (&I+1 GE &NP)
LOADING MAC LINE  AIF (NOT(&I+1 GE &NP)).AIF_23_1
LOADING MAC LINE &VL SETC 'X''80000000''+'
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_23_E
LOADING MAC LINE .AIF_23_1 ANOP
LOADING MAC LINE &VL SETC ''
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_23_E ANOP
LOADING MAC LINE                    DC    A(&VL&DCB)
LOADING MAC LINE &I SETA &I+2
LOADING MAC LINE .*             AEND
LOADING MAC LINE  AGO .AWH_3_T
LOADING MAC LINE .AWH_3_E ANOP
LOADING MAC LINE .*       AELSEIF ('&MF(1)' EQ 'E')
LOADING MAC LINE  AGO .AIF_19_E
LOADING MAC LINE .AIF_19_1 ANOP
LOADING MAC LINE  AIF (NOT('&MF(1)' EQ 'E')).AIF_19_2
LOADING MAC LINE .*
LOADING MAC LINE .* EXEC FORM
LOADING MAC LINE .*
LOADING MAC LINE .*             AIF   ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_24_1
LOADING MAC LINE &N DS    0H
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_24_1 ANOP
LOADING MAC LINE .*             AIF  ('&MF(2)'(1,1) EQ '(')
LOADING MAC LINE  AIF (NOT('&MF(2)'(1,1) EQ '(')).AIF_25_1
LOADING MAC LINE                     ZOPTLR 14,&MF(2)
LOADING MAC LINE .*             AELSE
LOADING MAC LINE  AGO .AIF_25_E
LOADING MAC LINE .AIF_25_1 ANOP
LOADING MAC LINE                     LA     14,&MF(2)
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_25_E ANOP
LOADING MAC LINE                B    ZCLOSE_DO_LOOP&SYSNDX
LOADING MAC LINE ZCLOSE_DO_UNTIL&SYSNDX DS 0H
LOADING MAC LINE                LTR  1,1
LOADING MAC LINE                BM   ZCLOSE_DO_EXIT&SYSNDX
LOADING MAC LINE                LTR  15,15
LOADING MAC LINE                BNZ  ZCLOSE_DO_EXIT&SYSNDX
LOADING MAC LINE ZCLOSE_DO_LOOP&SYSNDX DS 0H
LOADING MAC LINE                     L   1,0(14)
LOADING MAC LINE                     SVC 20
LOADING MAC LINE                     AHI 14,4
LOADING MAC LINE                B    ZCLOSE_DO_UNTIL&SYSNDX
LOADING MAC LINE ZCLOSE_DO_EXIT&SYSNDX DS 0H
LOADING MAC LINE .*       AELSEIF ('&MF(1)' EQ 'I')
LOADING MAC LINE  AGO .AIF_19_E
LOADING MAC LINE .AIF_19_2 ANOP
LOADING MAC LINE  AIF (NOT('&MF(1)' EQ 'I')).AIF_19_3
LOADING MAC LINE .*
LOADING MAC LINE .* STD FORM
LOADING MAC LINE .*
LOADING MAC LINE .*             AIF ('&N' NE '')
LOADING MAC LINE  AIF (NOT('&N' NE '')).AIF_26_1
LOADING MAC LINE &N DS    0H
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_26_1 ANOP
LOADING MAC LINE &I SETA  1
LOADING MAC LINE .*             AWHILE (&I LE &NP)
LOADING MAC LINE .AWH_4_T ANOP
LOADING MAC LINE  AIF (NOT(&I LE &NP)).AWH_4_E
LOADING MAC LINE &DCB SETC  '&DCBLIST(&I)'
LOADING MAC LINE &OPTION SETC  '&DCBLIST(&I+1)'
LOADING MAC LINE .*                 AIF ('&DCB'(1,1) EQ '(')  RPI 764 TPI 1045
LOADING MAC LINE  AIF (NOT('&DCB'(1,1) EQ '(')).AIF_27_1
LOADING MAC LINE                        ZOPTLR 1,&DCB(1)
LOADING MAC LINE .*                 AELSE
LOADING MAC LINE  AGO .AIF_27_E
LOADING MAC LINE .AIF_27_1 ANOP
LOADING MAC LINE                        LA     1,&DCB
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_27_E ANOP
LOADING MAC LINE .*                 AIF   ('&OPTION' NE '')
LOADING MAC LINE  AIF (NOT('&OPTION' NE '')).AIF_28_1
LOADING MAC LINE                          MNOTE 12,'CLOSE OPTION NOT SUPPORTED - &OPTION          MEXIT
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_28_1 ANOP
LOADING MAC LINE                    SVC   20 CLOSE R1=DCB/ACB
LOADING MAC LINE &I SETA &I+2
LOADING MAC LINE .*                 AIF    (&I LE &NP)
LOADING MAC LINE  AIF (NOT(&I LE &NP)).AIF_29_1
LOADING MAC LINE                           LTR   15,15
LOADING MAC LINE                           BNZ   Z390_CLOSE_EXIT&SYSNDX RPI 668
LOADING MAC LINE .*                 AEND
LOADING MAC LINE .AIF_29_1 ANOP
LOADING MAC LINE .*             AEND
LOADING MAC LINE  AGO .AWH_4_T
LOADING MAC LINE .AWH_4_E ANOP
LOADING MAC LINE .*             AIF (&NP GT 2)
LOADING MAC LINE  AIF (NOT(&NP GT 2)).AIF_30_1
LOADING MAC LINE Z390_CLOSE_EXIT&SYSNDX EQU *
LOADING MAC LINE .*             AEND
LOADING MAC LINE .AIF_30_1 ANOP
LOADING MAC LINE .*       AELSE
LOADING MAC LINE  AGO .AIF_19_E
LOADING MAC LINE .AIF_19_3 ANOP
LOADING MAC LINE                MNOTE 12,'CLOSE MF=&MF NOT SUPPORTED'
LOADING MAC LINE                MEXIT
LOADING MAC LINE .*       AEND
LOADING MAC LINE .AIF_19_E ANOP
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
ZCLOSE       29          AIF (NOT(N'&SYSLIST GT 1)).AIF_18_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(N'&SYSLIST GT 1)).AIF_18_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(N'&SYSLIST GT 1)).AIF_18_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST GT 1)).AIF_18_1
EXP TOKEN=N'
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST GT 1)).AIF_18_1
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST GT 1)).AIF_18_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  181 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=4 VARS=1 PREV OP = N' NEXT OP = GT
EXP OPS=4 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  182 OP= N'('&SYSLIST')=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 1)).AIF_18_1
EXP TOKEN= 
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 1 GT 1 = 0
  GEN  PC LOC=  183 OP= COMPGT(1,1)=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  184 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  185 OP= AIF(1)=.AIF_18_1 BRANCH
 
ZCLOSE       33         &NP SETA  N'&DCBLIST
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP
LCLA &NP(1)
EXP TOKEN=N'
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = N'
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 10
PUSHING OP - N' FROM='&DCBLIST
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  186 OP= PUSHV(&DCBLIST)='(SYSOUT,,SYSIN)'
EXP OPS=1 VARS=1 PREV OP = N' NEXT OP = ~
EXP OPS=1 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 6
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  187 OP= N'('(SYSOUT,,SYSIN)')=3
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  188 OP= STORV(&NP)=3
SETA LCLA &NP(1)= 3
ZCLOSE       34          AIF (NOT('&MF' EQ 'L')).AIF_19_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF' EQ 'L')).AIF_19_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF' EQ 'L')).AIF_19_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' EQ 'L')).AIF_19_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' EQ 'L')).AIF_19_1
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' EQ 'L')).AIF_19_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  189 OP= PUSHV(&MF)='I'
STRING CONCAT - &MF = I FROM=&MF' EQ 'L')).AIF_19_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'L')).AIF_19_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='L')).AIF_19_1
EXP TOKEN=L'
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'L' = 0
  GEN  PC LOC=  190 OP= COMPEQ('I','L')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  191 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  192 OP= AIF(1)=.AIF_19_1 BRANCH
 
ZCLOSE       62          AIF (NOT('&MF(1)' EQ 'E')).AIF_19_2
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF(1)' EQ 'E')).AIF_19_2
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF(1)' EQ 'E')).AIF_19_2
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(1)' EQ 'E')).AIF_19_2
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(1)' EQ 'E')).AIF_19_2
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(1)' EQ 'E')).AIF_19_2
  GEN  PC LOC=  193 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  194 OP= PUSHV(&MF)='I'
PUSHING OP - ) FROM=(1)' EQ 'E')).AIF_19_2
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=5 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=5 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=I
POP OP=)
  GEN  PC LOC=  195 OP= PUSHA()=1
  GEN  PC LOC=  196 OP= SUBLST('I',1)='I'
  GEN  PC LOC=  197 OP= CONCAT('','I')='I'
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'E')).AIF_19_2
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='E')).AIF_19_2
EXP TOKEN=E
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'E' = 0
  GEN  PC LOC=  198 OP= COMPEQ('I','E')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  199 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  200 OP= AIF(1)=.AIF_19_2 BRANCH
 
ZCLOSE       86          AIF (NOT('&MF(1)' EQ 'I')).AIF_19_3
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&MF(1)' EQ 'I')).AIF_19_3
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&MF(1)' EQ 'I')).AIF_19_3
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF(1)' EQ 'I')).AIF_19_3
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF(1)' EQ 'I')).AIF_19_3
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF(1)' EQ 'I')).AIF_19_3
  GEN  PC LOC=  201 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  202 OP= PUSHV(&MF)='I'
PUSHING OP - ) FROM=(1)' EQ 'I')).AIF_19_3
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=5 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=5 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=I
POP OP=)
  GEN  PC LOC=  203 OP= PUSHA()=1
  GEN  PC LOC=  204 OP= SUBLST('I',1)='I'
  GEN  PC LOC=  205 OP= CONCAT('','I')='I'
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'I')).AIF_19_3
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='I')).AIF_19_3
EXP TOKEN=I'
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'I' EQ 'I' = 1
  GEN  PC LOC=  206 OP= COMPEQ('I','I')=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=  207 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  208 OP= AIF(0)=.AIF_19_3 NO BRANCH
ZCLOSE       90          AIF (NOT('&N' NE '')).AIF_26_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&N' NE '')).AIF_26_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&N' NE '')).AIF_26_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&N' NE '')).AIF_26_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&N' NE '')).AIF_26_1
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N' NE '')).AIF_26_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  209 OP= PUSHV(&N)=''
STRING CONCAT - &N =  FROM=&N' NE '')).AIF_26_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '')).AIF_26_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='')).AIF_26_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  210 OP= COMPNE('','')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  211 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  212 OP= AIF(1)=.AIF_26_1 BRANCH
 
ZCLOSE       93         &I SETA  1
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I
LCLA &I(1)
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  213 OP= PUSHA()=1
  GEN  PC LOC=  214 OP= STORV(&I)=1
SETA LCLA &I(1)= 1
ZCLOSE       94          AIF (NOT(&I LE &NP)).AWH_4_E
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&I LE &NP)).AWH_4_E
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&I LE &NP)).AWH_4_E
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&I LE &NP)).AWH_4_E
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I LE &NP)).AWH_4_E
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  215 OP= PUSHV(&I)=1
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E &NP)).AWH_4_E
EXP TOKEN= 
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP)).AWH_4_E
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  216 OP= PUSHV(&NP)=3
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 1 LE 3 = 1
  GEN  PC LOC=  217 OP= COMPLE(1,3)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=  218 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  219 OP= AIF(0)=.AWH_4_E NO BRANCH
ZCLOSE       95         &DCB SETC  '&DCBLIST(&I)'
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
LCLC &DCB(1)
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCBLIST(&I)'
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST(&I)'
  GEN  PC LOC=  220 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  221 OP= PUSHV(&DCBLIST)='(SYSOUT,,SYSIN)'
PUSHING OP - ) FROM=(&I)'
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I)'
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  222 OP= PUSHV(&I)=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=SYSOUT
POP OP=)
  GEN  PC LOC=  223 OP= SUBLST('(SYSOUT,,SYSIN)',1)='SYSOUT'
  GEN  PC LOC=  224 OP= CONCAT('','SYSOUT')='SYSOUT'
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  225 OP= STORV(&DCB)='SYSOUT'
SETC LCLC &DCB(1)= SYSOUT
ZCLOSE       96         &OPTION SETC  '&DCBLIST(&I+1)'
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION
LCLC &OPTION(1)
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCBLIST(&I+1)'
EXP TOKEN=&DCBLIST
PUSHING VAR - &DCBLIST FROM=&DCBLIST(&I+1)'
  GEN  PC LOC=  226 OP= PUSHC()=''
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  227 OP= PUSHV(&DCBLIST)='(SYSOUT,,SYSIN)'
PUSHING OP - ) FROM=(&I+1)'
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I+1)'
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  228 OP= PUSHV(&I)=1
EXP TOKEN=+
EXP OPS=2 VARS=3 PREV OP = ) NEXT OP = +
EXP OPS=2 VARS=3 ACTION = 3 PREV CLASS = 4 NEXT CLASS = 1
PUSHING OP - + FROM=+1)'
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=3 VARS=4 PREV OP = + NEXT OP = )
EXP OPS=3 VARS=4 ACTION = 1 PREV CLASS = 1 NEXT CLASS = 4
POP OP=+
ADD 2 = 1 + 1
  GEN  PC LOC=  229 OP= ADD(1,1)=2
EXP OPS=2 VARS=3 PREV OP = ) NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=
POP OP=)
  GEN  PC LOC=  230 OP= SUBLST('(SYSOUT,,SYSIN)',2)=''
  GEN  PC LOC=  231 OP= CONCAT('','')=''
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  232 OP= STORV(&OPTION)=''
SETC LCLC &OPTION(1)= 
ZCLOSE       97          AIF (NOT('&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB'(1,1) EQ '(')).AIF_27_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  233 OP= PUSHV(&DCB)='SYSOUT'
STRING CONCAT - &DCB = SYSOUT FROM=&DCB'(1,1) EQ '(')).AIF_27_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=4 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=4 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=  234 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=4 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=4 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING SYSOUT(1,1)
  GEN  PC LOC=  235 OP= PUSHA()=1
  GEN  PC LOC=  236 OP= SUBSTR('SYSOUT',1,1)='S'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '(')).AIF_27_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='(')).AIF_27_1
EXP TOKEN=(
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'S' EQ '(' = 0
  GEN  PC LOC=  237 OP= COMPEQ('S','(')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  238 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  239 OP= AIF(1)=.AIF_27_1 BRANCH
 
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZCLOSE      100                                LA     1,&DCB
ZCLOSE      100  (11/100)+                       LA     1,SYSOUT
ZCLOSE      102          AIF (NOT('&OPTION' NE '')).AIF_28_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT('&OPTION' NE '')).AIF_28_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T('&OPTION' NE '')).AIF_28_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=('&OPTION' NE '')).AIF_28_1
EXP TOKEN='
EXP OPS=3 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=3 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&OPTION' NE '')).AIF_28_1
EXP TOKEN=&OPTION
PUSHING VAR - &OPTION FROM=&OPTION' NE '')).AIF_28_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  240 OP= PUSHV(&OPTION)=''
STRING CONCAT - &OPTION =  FROM=&OPTION' NE '')).AIF_28_1
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '')).AIF_28_1
EXP TOKEN= 
EXP TOKEN='
EXP OPS=4 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=4 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='')).AIF_28_1
EXP TOKEN='
EXP OPS=5 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=5 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  241 OP= COMPNE('','')=0
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 1 = NOT 0
  GEN  PC LOC=  242 OP= NOT(0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  243 OP= AIF(1)=.AIF_28_1 BRANCH
 
ZCLOSE      106  (11/106)+                   SVC   20 CLOSE R1=DCB/ACB
ZCLOSE      107         &I SETA &I+2
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I+2
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  244 OP= PUSHV(&I)=1
EXP TOKEN=+
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = +
EXP OPS=0 VARS=1 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 1
PUSHING OP - + FROM=+2
EXP TOKEN=2
PUSHING SDT - 2
EXP OPS=1 VARS=2 PREV OP = + NEXT OP = ~
EXP OPS=1 VARS=2 ACTION = 1 PREV CLASS = 1 NEXT CLASS = 6
POP OP=+
ADD 3 = 1 + 2
  GEN  PC LOC=  245 OP= ADD(1,2)=3
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  246 OP= STORV(&I)=3
SETA LCLA &I(1)= 3
ZCLOSE      108          AIF (NOT(&I LE &NP)).AIF_29_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&I LE &NP)).AIF_29_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&I LE &NP)).AIF_29_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&I LE &NP)).AIF_29_1
EXP TOKEN=&I
PUSHING VAR - &I FROM=&I LE &NP)).AIF_29_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  247 OP= PUSHV(&I)=3
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E &NP)).AIF_29_1
EXP TOKEN= 
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP)).AIF_29_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  248 OP= PUSHV(&NP)=3
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 3 LE 3 = 1
  GEN  PC LOC=  249 OP= COMPLE(3,3)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=  250 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  251 OP= AIF(0)=.AIF_29_1 NO BRANCH
ZCLOSE      109  (11/109)+                          LTR   15,15
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZCLOSE      110                                   BNZ   Z390_CLOSE_EXIT&SYSNDX RPI 668
ZCLOSE      110  (11/110)+                          BNZ   Z390_CLOSE_EXIT0010 RPI 668
ZCLOSE      112          AGO .AWH_4_T
 
ZCLOSE       94          AIF (NOT(&I LE &NP)).AWH_4_E
  EXEC PC LOC=  215 OP= PUSHV(&I)=3
  EXEC PC LOC=  216 OP= PUSHV(&NP)=3
COMPARE 3 ~ 3 = 1
  EXEC PC LOC=  217 OP= COMPLE(3,3)=1
NOT 0 = NOT 1
  EXEC PC LOC=  218 OP= NOT(1)=0
  EXEC PC LOC=  219 OP= AIF(0)=.AWH_4_E NO BRANCH
ZCLOSE       95         &DCB SETC  '&DCBLIST(&I)'
  EXEC PC LOC=  220 OP= PUSHC()=''
  EXEC PC LOC=  221 OP= PUSHV(&DCBLIST)='(SYSOUT,,SYSIN)'
  EXEC PC LOC=  222 OP= PUSHV(&I)=3
SUBLIST PARM=SYSIN
  EXEC PC LOC=  223 OP= SUBLST('(SYSOUT,,SYSIN)',3)='SYSIN'
  EXEC PC LOC=  224 OP= CONCAT('','SYSIN')='SYSIN'
SETC LCLC &DCB(1)= SYSIN
  EXEC PC LOC=  225 OP= STORV(&DCB)='SYSIN'
ZCLOSE       96         &OPTION SETC  '&DCBLIST(&I+1)'
  EXEC PC LOC=  226 OP= PUSHC()=''
  EXEC PC LOC=  227 OP= PUSHV(&DCBLIST)='(SYSOUT,,SYSIN)'
  EXEC PC LOC=  228 OP= PUSHV(&I)=3
ADD 4 = 3 + 1
  EXEC PC LOC=  229 OP= ADD(3,1)=4
SUBLIST PARM=
  EXEC PC LOC=  230 OP= SUBLST('(SYSOUT,,SYSIN)',4)=''
  EXEC PC LOC=  231 OP= CONCAT('','')=''
SETC LCLC &OPTION(1)= 
  EXEC PC LOC=  232 OP= STORV(&OPTION)=''
ZCLOSE       97          AIF (NOT('&DCB'(1,1) EQ '(')).AIF_27_1
  EXEC PC LOC=  233 OP= PUSHV(&DCB)='SYSIN'
  EXEC PC LOC=  234 OP= PUSHA()=1
  EXEC PC LOC=  235 OP= PUSHA()=1
SUBSTRING SYSIN(1,1)
  EXEC PC LOC=  236 OP= SUBSTR('SYSIN',1,1)='S'
COMPARE 'S' ~ '(' = 0
  EXEC PC LOC=  237 OP= COMPEQ('S','(')=0
NOT 1 = NOT 0
  EXEC PC LOC=  238 OP= NOT(0)=1
  EXEC PC LOC=  239 OP= AIF(1)=.AIF_27_1 BRANCH
 
EXP TOKEN=&DCB
PUSHING VAR - &DCB FROM=&DCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZCLOSE      100                                LA     1,&DCB
ZCLOSE      100  (11/100)+                       LA     1,SYSIN
ZCLOSE      102          AIF (NOT('&OPTION' NE '')).AIF_28_1
  EXEC PC LOC=  240 OP= PUSHV(&OPTION)=''
COMPARE '' ~ '' = 0
  EXEC PC LOC=  241 OP= COMPNE('','')=0
NOT 1 = NOT 0
  EXEC PC LOC=  242 OP= NOT(0)=1
  EXEC PC LOC=  243 OP= AIF(1)=.AIF_28_1 BRANCH
 
ZCLOSE      106  (11/106)+                   SVC   20 CLOSE R1=DCB/ACB
ZCLOSE      107         &I SETA &I+2
  EXEC PC LOC=  244 OP= PUSHV(&I)=3
ADD 5 = 3 + 2
  EXEC PC LOC=  245 OP= ADD(3,2)=5
SETA LCLA &I(1)= 5
  EXEC PC LOC=  246 OP= STORV(&I)=5
ZCLOSE      108          AIF (NOT(&I LE &NP)).AIF_29_1
  EXEC PC LOC=  247 OP= PUSHV(&I)=5
  EXEC PC LOC=  248 OP= PUSHV(&NP)=3
COMPARE 5 ~ 3 = 0
  EXEC PC LOC=  249 OP= COMPLE(5,3)=0
NOT 1 = NOT 0
  EXEC PC LOC=  250 OP= NOT(0)=1
  EXEC PC LOC=  251 OP= AIF(1)=.AIF_29_1 BRANCH
 
ZCLOSE      112          AGO .AWH_4_T
 
ZCLOSE       94          AIF (NOT(&I LE &NP)).AWH_4_E
  EXEC PC LOC=  215 OP= PUSHV(&I)=5
  EXEC PC LOC=  216 OP= PUSHV(&NP)=3
COMPARE 5 ~ 3 = 0
  EXEC PC LOC=  217 OP= COMPLE(5,3)=0
NOT 1 = NOT 0
  EXEC PC LOC=  218 OP= NOT(0)=1
  EXEC PC LOC=  219 OP= AIF(1)=.AWH_4_E BRANCH
 
ZCLOSE      113          AIF (NOT(&NP GT 2)).AIF_30_1
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(NOT(&NP GT 2)).AIF_30_1
EXP TOKEN=NOT
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = NOT
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 11
PUSHING OP - NOT FROM=T(&NP GT 2)).AIF_30_1
EXP TOKEN=(
EXP OPS=2 VARS=0 PREV OP = NOT NEXT OP = (
EXP OPS=2 VARS=0 ACTION = 3 PREV CLASS = 11 NEXT CLASS = 3
PUSHING OP - ( FROM=(&NP GT 2)).AIF_30_1
EXP TOKEN=&NP
PUSHING VAR - &NP FROM=&NP GT 2)).AIF_30_1
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  252 OP= PUSHV(&NP)=3
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=3 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 2)).AIF_30_1
EXP TOKEN= 
EXP TOKEN=2
PUSHING SDT - 2
EXP TOKEN=)
EXP OPS=4 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=4 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 3 GT 2 = 1
  GEN  PC LOC=  253 OP= COMPGT(3,2)=1
EXP OPS=3 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=3 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
EXP TOKEN=)
EXP OPS=2 VARS=1 PREV OP = NOT NEXT OP = )
EXP OPS=2 VARS=1 ACTION = 13 PREV CLASS = 11 NEXT CLASS = 4
POP OP=NOT
NOT 0 = NOT 1
  GEN  PC LOC=  254 OP= NOT(1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  255 OP= AIF(0)=.AIF_30_1 NO BRANCH
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
ZCLOSE      114  (11/114)+Z390_CLOSE_EXIT0010    EQU *
ZCLOSE      116          AGO .AIF_19_E
 
ZCLOSE      116  (11/116)+*MEXIT #=    10 LV= 3 ZCLOSE
ZCLOSE      116  (11/116)+*MEXIT #=     9 LV= 2 CLOSE1
ZCLOSE      116  (11/116)+*MEXIT #=     8 LV= 1 CLOSE
OPEN CODE    20    (1/20)          L     R13,SAVE+4              ANROPANDES SAVE AREA
OPEN CODE    21    (1/21)          LM    R14,R12,12(R13)         ÅTERSTÄLL REGISTREN
OPEN CODE    22    (1/22)          LA    R15,0                   LÄMNA RETURKOD 0 I REG 15
OPEN CODE    23    (1/23)          BR    R14
OPEN CODE    24    (1/24) * --------------------------------------------------------------------
OPEN CODE    26    (1/26) *MCALL #=    11 LV= 1 SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=FT,LRECL=80,EODAD=EOFSYSIN
LOADING FILE X:\Downloads\z390_v1707\z390_v1707\mac\DCB.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/16/08                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* MAINTENANCE
LOADING MAC LINE .* 10/12/05 ADD DCBREC AND DCBDSNAM FIELDS, AND DEFAULT DDNAME
LOADING MAC LINE .* 10/17/05 RPI  26 - correct missing .DDDEF label
LOADING MAC LINE .* 10/17/05 RPI  27 - issue error for any defined key word parms
LOADING MAC LINE .* 11/13/05 RPI  88 - add DCBID EBCDIC/ASCII ID for I/O verification
LOADING MAC LINE .* 11/16/05 RPI  95 - add DDNAME and DSNAME conflict check
LOADING MAC LINE .* 11/17/05 RPI  96 - add RECFM, LRECL, and BLKSIZE consistency check
LOADING MAC LINE .* 04/10/06 RPI 244  support RECFM A/M, allow LRECL=0
LOADING MAC LINE .* 05/05/06 RPI 281  add DCBE support for EODAD and SYNAD
LOADING MAC LINE .* 04/11/07 RPI 587  support 32 bit DCBLRECLF and DCBBLKSIF fields
LOADING MAC LINE .* 04/23/07 RPI 599  add call to DCBD to define referened fields
LOADING MAC LINE .* 08/03/07 RPI 644  zero DCBOFLGS and fix DCBMACRF when 2 operands
LOADING MAC LINE .* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
LOADING MAC LINE .* 06/23/08 RPI 867 JUST ISSUE WARNING FOR EXLST NOT SUPPORTED
LOADING MAC LINE .* 09/11/08 RPI 764 ADD DCBIO TOTAL IO REQUESTS SINCE OPEN USED BY PL
LOADING MAC LINE .* 09/16/08 RPI 91764 ADD DCBIO TOTAL IO REQUESTS SINCE OPEN USED BY PL
LOADING MAC LINE .* 11/10/08 RPI 946 INIT ENTIRE DCB TO ZEROS TO AVOID INIT X'F6' FILLER
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       DCB   &DSORG=PS,&BFALN=,&BFTEK=,&BLKSIZE=0,&BUFCB=,&BUFL=,&BUFNO=,&BUFOPT=,&DCBE=0,&DDNAME=,&DEVD=,&DSNAME=0,&EODAD=0,&EXLST=,&KEYLEN=,&LINCT,&LRECL=0,&MACRF=GM,&OPTCD=,&RECFM=FB,&RECORD=0,&SYNAD=0      ERROR EXIT
LOADING MAC LINE &N       DS    0D             RPI 915
LOADING MAC LINE          DC    XL(DCBLEN)'00' RPI 946
LOADING MAC LINE &NPOS    SETA  N'&SYSLIST
LOADING MAC LINE .POSLOOP ANOP
LOADING MAC LINE          AIF   (&NPOS EQ 0).POSEND
LOADING MAC LINE          MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(&NPOS)'
LOADING MAC LINE &NPOS    SETA  &NPOS-1
LOADING MAC LINE          AGO   .POSLOOP
LOADING MAC LINE .POSEND  ANOP
LOADING MAC LINE          AIF   ('&DEVD'   NE '').ERR2
LOADING MAC LINE          AIF   ('&EXLST'  EQ '').NO_EXLST
LOADING MAC LINE          MNOTE 4,'DCB EXLST NOT SUPPORTED YET - IGNORED'  RPI 867
LOADING MAC LINE .NO_EXLST ANOP
LOADING MAC LINE          AIF   ('&KEYLEN' NE '').ERR4
LOADING MAC LINE          AIF   ('&RECFM' EQ 'F').CHKF
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FA').CHKF
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FM').CHKF
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FB').CHKFB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FBA').CHKFB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FBM').CHKFB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'V').CHKV
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VA').CHKV
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VM').CHKV
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VB').CHKVB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VBA').CHKVB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VBM').CHKVB
LOADING MAC LINE          AIF   ('&RECFM' EQ 'FT').CHKFT
LOADING MAC LINE          AIF   ('&RECFM' EQ 'VT').CHKVT
LOADING MAC LINE          MNOTE 12,'INVALID RECFM - &RECFM'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .CHKF    ANOP
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &LRECL NE &BLKSIZE).ERR_LRECL
LOADING MAC LINE          AGO   .CHKEND
LOADING MAC LINE .CHKFB   ANOP
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE/&LRECL*&LRECL NE &BLKSIZE).ERR_LRECL
LOADING MAC LINE          AGO   .CHKEND
LOADING MAC LINE .CHKV    ANOP
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
LOADING MAC LINE          AGO   .CHKEND
LOADING MAC LINE .CHKVB   ANOP
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND (&BLKSIZE LT (&LRECL+4))).ERR_LRECL
LOADING MAC LINE          AGO   .CHKEND
LOADING MAC LINE .CHKFT   ANOP
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
LOADING MAC LINE          AGO   .CHKEND
LOADING MAC LINE .CHKVT   ANOP
LOADING MAC LINE          AIF   (&LRECL EQ 0 AND &BLKSIZE EQ 0).ERR_LRECL
LOADING MAC LINE          AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
LOADING MAC LINE .CHKEND  ANOP
LOADING MAC LINE          AIF   ('&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
LOADING MAC LINE          MNOTE 12,'DSNAME AND DDNAME ARE MUTUALLY EXCLUSIVE'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .DSNOK   ANOP
LOADING MAC LINE          ORG   &N+DCBID-IHADCB        RPI88
LOADING MAC LINE          DC    C'DCBV1001'            RPI88
LOADING MAC LINE          ORG   &N+DCBDSORG-IHADCB
LOADING MAC LINE          DC    AL1(DCBDSORG_&DSORG) DCBDSORG
LOADING MAC LINE          ORG   &N+DCBEODAD-IHADCB
LOADING MAC LINE          DC    A(&EODAD) DCBEODAD
LOADING MAC LINE          ORG   &N+DCBRECFM-IHADCB
LOADING MAC LINE          DC    AL1(DCBRECFM_&RECFM) DCBRECFM
LOADING MAC LINE          ORG   &N+DCBDDNAM-IHADCB
LOADING MAC LINE          AIF   ('&DDNAME' EQ '').DDDEF
LOADING MAC LINE          DC    CL8'&DDNAME' DCBDDNAM
LOADING MAC LINE          AGO   .DDEND
LOADING MAC LINE .DDDEF   ANOP
LOADING MAC LINE          DC    CL8'&N' DCBDDNAME
LOADING MAC LINE .DDEND   ANOP
LOADING MAC LINE          ORG   &N+DCBOFLGS-IHADCB
LOADING MAC LINE          DC    AL1(0) DCBOFLGS RPI 668 ZERO (SET AT OPEN)
LOADING MAC LINE          ORG   &N+DCBMACRF-IHADCB
LOADING MAC LINE          AIF   (N'&MACRF GT 1).MACRF2 RPI 668
LOADING MAC LINE          DC    AL2(DCBMACRF_&MACRF(1)) DCBMACRF
LOADING MAC LINE          AGO   .MACRF2_END
LOADING MAC LINE .MACRF2  ANOP
LOADING MAC LINE          DC    AL2(DCBMACRF_&MACRF(1)+DCBMACRF_&MACRF(2)) DCBMACRF
LOADING MAC LINE .MACRF2_END ANOP
LOADING MAC LINE          ORG   &N+DCBSYNAD-IHADCB
LOADING MAC LINE          DC    A(&SYNAD) DCBSYNAD DCBSYNAD
LOADING MAC LINE          ORG   &N+DCBBLKSIF-IHADCB    RPI 587
LOADING MAC LINE          DC    F'&BLKSIZE' DCBBLKSIF  RPI 587
LOADING MAC LINE          ORG   &N+DCBLRECLF-IHADCB    RPI 587
LOADING MAC LINE          DC    F'&LRECL' DCBLRECLF    RPI 587
LOADING MAC LINE          ORG   &N+DCBREC-IHADCB
LOADING MAC LINE          DC    A(&RECORD) DCBREC
LOADING MAC LINE          ORG   &N+DCBDSNAM-IHADCB
LOADING MAC LINE          DC    A(&DSNAME) DCBDSNAM
LOADING MAC LINE          ORG   &N+DCBDCBE-IHADCB   RPI 281
LOADING MAC LINE          DC    A(&DCBE) DCBDCBE
LOADING MAC LINE          ORG   &N+DCBIO-IHADCB     RPI 907
LOADING MAC LINE          DC    A(0)     DCBIO      RPI 907 TOTAL IO COUNT SINCE OPEN
LOADING MAC LINE          ORG   &N+DCBLEN
LOADING MAC LINE .EXIT    ANOP
LOADING MAC LINE          DCBD
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR_LRECL MNOTE 12,'DCB INVALID LRECL/BLKSIZE'
LOADING MAC LINE          AGO   .EXIT
LOADING MAC LINE .ERR2    MNOTE 12,'DCB DEVD NOT SUPPORTED'
LOADING MAC LINE          AGO   .EXIT
LOADING MAC LINE .ERR3    MNOTE 12,'DCB EXLST NOT SUPPORTED'
LOADING MAC LINE          AGO   .EXIT
LOADING MAC LINE .ERR4    MNOTE 12,'DCB KEYLEN NOT SUPPORTED'
LOADING MAC LINE          AGO   .EXIT
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
define type M macro label for SYSIN
 MZ390 CALLING AZ390 SYM LOCK
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB          49   (12/49)+SYSIN    DS    0D             RPI 915
DCB          50   (12/50)+         DC    XL(DCBLEN)'00' RPI 946
DCB          51         &NPOS    SETA  N'&SYSLIST
EXP TOKEN=&NPOS
PUSHING VAR - &NPOS FROM=&NPOS
LCLA &NPOS(1)
EXP TOKEN=N'
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = N'
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  256 OP= PUSHV(&SYSLIST)=''
EXP OPS=1 VARS=1 PREV OP = N' NEXT OP = ~
EXP OPS=1 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 6
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  257 OP= N'('&SYSLIST')=0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=  258 OP= STORV(&NPOS)=0
SETA LCLA &NPOS(1)= 0
DCB          53                  AIF   (&NPOS EQ 0).POSEND
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&NPOS EQ 0).POSEND
EXP TOKEN=&NPOS
PUSHING VAR - &NPOS FROM=&NPOS EQ 0).POSEND
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  259 OP= PUSHV(&NPOS)=0
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 0).POSEND
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 0 EQ 0 = 1
  GEN  PC LOC=  260 OP= COMPEQ(0,0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  261 OP= AIF(1)=.POSEND BRANCH
 
DCB          58                  AIF   ('&DEVD'   NE '').ERR2
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DEVD'   NE '').ERR2
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DEVD'   NE '').ERR2
EXP TOKEN=&DEVD
PUSHING VAR - &DEVD FROM=&DEVD'   NE '').ERR2
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  262 OP= PUSHV(&DEVD)=''
STRING CONCAT - &DEVD =  FROM=&DEVD'   NE '').ERR2
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN= 
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '').ERR2
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').ERR2
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  263 OP= COMPNE('','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  264 OP= AIF(0)=.ERR2 NO BRANCH
DCB          59                  AIF   ('&EXLST'  EQ '').NO_EXLST
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&EXLST'  EQ '').NO_EXLST
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&EXLST'  EQ '').NO_EXLST
EXP TOKEN=&EXLST
PUSHING VAR - &EXLST FROM=&EXLST'  EQ '').NO_EXLST
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  265 OP= PUSHV(&EXLST)=''
STRING CONCAT - &EXLST =  FROM=&EXLST'  EQ '').NO_EXLST
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').NO_EXLST
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').NO_EXLST
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=  266 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  267 OP= AIF(1)=.NO_EXLST BRANCH
 
DCB          62                  AIF   ('&KEYLEN' NE '').ERR4
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&KEYLEN' NE '').ERR4
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&KEYLEN' NE '').ERR4
EXP TOKEN=&KEYLEN
PUSHING VAR - &KEYLEN FROM=&KEYLEN' NE '').ERR4
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  268 OP= PUSHV(&KEYLEN)=''
STRING CONCAT - &KEYLEN =  FROM=&KEYLEN' NE '').ERR4
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '').ERR4
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').ERR4
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=  269 OP= COMPNE('','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  270 OP= AIF(0)=.ERR4 NO BRANCH
DCB          63                  AIF   ('&RECFM' EQ 'F').CHKF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'F').CHKF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'F').CHKF
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'F').CHKF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  271 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'F').CHKF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'F').CHKF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='F').CHKF
EXP TOKEN=F
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'F' = 0
  GEN  PC LOC=  272 OP= COMPEQ('FT','F')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  273 OP= AIF(0)=.CHKF NO BRANCH
DCB          64                  AIF   ('&RECFM' EQ 'FA').CHKF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FA').CHKF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FA').CHKF
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FA').CHKF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  274 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FA').CHKF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FA').CHKF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FA').CHKF
EXP TOKEN=FA
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FA' = 0
  GEN  PC LOC=  275 OP= COMPEQ('FT','FA')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  276 OP= AIF(0)=.CHKF NO BRANCH
DCB          65                  AIF   ('&RECFM' EQ 'FM').CHKF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FM').CHKF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FM').CHKF
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FM').CHKF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  277 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FM').CHKF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FM').CHKF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FM').CHKF
EXP TOKEN=FM
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FM' = 0
  GEN  PC LOC=  278 OP= COMPEQ('FT','FM')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  279 OP= AIF(0)=.CHKF NO BRANCH
DCB          66                  AIF   ('&RECFM' EQ 'FB').CHKFB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FB').CHKFB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FB').CHKFB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FB').CHKFB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  280 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FB').CHKFB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FB').CHKFB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FB').CHKFB
EXP TOKEN=FB
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FB' = 0
  GEN  PC LOC=  281 OP= COMPEQ('FT','FB')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  282 OP= AIF(0)=.CHKFB NO BRANCH
DCB          67                  AIF   ('&RECFM' EQ 'FBA').CHKFB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FBA').CHKFB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FBA').CHKFB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FBA').CHKFB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  283 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FBA').CHKFB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FBA').CHKFB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FBA').CHKFB
EXP TOKEN=FBA
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FBA' = 0
  GEN  PC LOC=  284 OP= COMPEQ('FT','FBA')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  285 OP= AIF(0)=.CHKFB NO BRANCH
DCB          68                  AIF   ('&RECFM' EQ 'FBM').CHKFB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FBM').CHKFB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FBM').CHKFB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FBM').CHKFB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  286 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FBM').CHKFB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FBM').CHKFB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FBM').CHKFB
EXP TOKEN=FBM
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FBM' = 0
  GEN  PC LOC=  287 OP= COMPEQ('FT','FBM')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  288 OP= AIF(0)=.CHKFB NO BRANCH
DCB          69                  AIF   ('&RECFM' EQ 'V').CHKV
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'V').CHKV
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'V').CHKV
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'V').CHKV
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  289 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'V').CHKV
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'V').CHKV
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='V').CHKV
EXP TOKEN=V
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'V' = 0
  GEN  PC LOC=  290 OP= COMPEQ('FT','V')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  291 OP= AIF(0)=.CHKV NO BRANCH
DCB          70                  AIF   ('&RECFM' EQ 'VA').CHKV
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'VA').CHKV
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'VA').CHKV
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'VA').CHKV
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  292 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'VA').CHKV
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'VA').CHKV
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='VA').CHKV
EXP TOKEN=VA
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'VA' = 0
  GEN  PC LOC=  293 OP= COMPEQ('FT','VA')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  294 OP= AIF(0)=.CHKV NO BRANCH
DCB          71                  AIF   ('&RECFM' EQ 'VM').CHKV
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'VM').CHKV
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'VM').CHKV
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'VM').CHKV
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  295 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'VM').CHKV
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'VM').CHKV
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='VM').CHKV
EXP TOKEN=VM
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'VM' = 0
  GEN  PC LOC=  296 OP= COMPEQ('FT','VM')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  297 OP= AIF(0)=.CHKV NO BRANCH
DCB          72                  AIF   ('&RECFM' EQ 'VB').CHKVB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'VB').CHKVB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'VB').CHKVB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'VB').CHKVB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  298 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'VB').CHKVB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'VB').CHKVB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='VB').CHKVB
EXP TOKEN=VB
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'VB' = 0
  GEN  PC LOC=  299 OP= COMPEQ('FT','VB')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  300 OP= AIF(0)=.CHKVB NO BRANCH
DCB          73                  AIF   ('&RECFM' EQ 'VBA').CHKVB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'VBA').CHKVB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'VBA').CHKVB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'VBA').CHKVB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  301 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'VBA').CHKVB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'VBA').CHKVB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='VBA').CHKVB
EXP TOKEN=VBA
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'VBA' = 0
  GEN  PC LOC=  302 OP= COMPEQ('FT','VBA')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  303 OP= AIF(0)=.CHKVB NO BRANCH
DCB          74                  AIF   ('&RECFM' EQ 'VBM').CHKVB
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'VBM').CHKVB
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'VBM').CHKVB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'VBM').CHKVB
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  304 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'VBM').CHKVB
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'VBM').CHKVB
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='VBM').CHKVB
EXP TOKEN=VBM
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'VBM' = 0
  GEN  PC LOC=  305 OP= COMPEQ('FT','VBM')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  306 OP= AIF(0)=.CHKVB NO BRANCH
DCB          75                  AIF   ('&RECFM' EQ 'FT').CHKFT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RECFM' EQ 'FT').CHKFT
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RECFM' EQ 'FT').CHKFT
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM' EQ 'FT').CHKFT
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  307 OP= PUSHV(&RECFM)='FT'
STRING CONCAT - &RECFM = FT FROM=&RECFM' EQ 'FT').CHKFT
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'FT').CHKFT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='FT').CHKFT
EXP TOKEN=FT
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'FT' EQ 'FT' = 1
  GEN  PC LOC=  308 OP= COMPEQ('FT','FT')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  309 OP= AIF(1)=.CHKFT BRANCH
 
DCB          97                  AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN=&LRECL
PUSHING VAR - &LRECL FROM=&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  310 OP= PUSHV(&LRECL)='80'
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN= 
EXP TOKEN=AND
EXP OPS=2 VARS=2 PREV OP = GT NEXT OP = AND
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 12
POP OP=GT
COMPARE 80 GT 0 = 1
  GEN  PC LOC=  311 OP= COMPGT(80,0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = AND
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 12
PUSHING OP - AND FROM=D &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN= 
EXP TOKEN=&BLKSIZE
PUSHING VAR - &BLKSIZE FROM=&BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  312 OP= PUSHV(&BLKSIZE)='0'
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=2 VARS=2 PREV OP = AND NEXT OP = GT
EXP OPS=2 VARS=2 ACTION = 3 PREV CLASS = 12 NEXT CLASS = 7
PUSHING OP - GT FROM=T 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN= 
EXP TOKEN=AND
EXP OPS=3 VARS=3 PREV OP = GT NEXT OP = AND
EXP OPS=3 VARS=3 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 12
POP OP=GT
COMPARE 0 GT 0 = 0
  GEN  PC LOC=  313 OP= COMPGT(0,0)=0
EXP OPS=2 VARS=2 PREV OP = AND NEXT OP = AND
EXP OPS=2 VARS=2 ACTION = 14 PREV CLASS = 12 NEXT CLASS = 12
POP OP=AND
AND 0 = 1 AND 0
  GEN  PC LOC=  314 OP= AND(1,0)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = AND
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 12
PUSHING OP - AND FROM=D &BLKSIZE NE &LRECL).ERR_LRECL
EXP TOKEN= 
EXP TOKEN=&BLKSIZE
PUSHING VAR - &BLKSIZE FROM=&BLKSIZE NE &LRECL).ERR_LRECL
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  315 OP= PUSHV(&BLKSIZE)='0'
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=2 VARS=2 PREV OP = AND NEXT OP = NE
EXP OPS=2 VARS=2 ACTION = 3 PREV CLASS = 12 NEXT CLASS = 7
PUSHING OP - NE FROM=E &LRECL).ERR_LRECL
EXP TOKEN= 
EXP TOKEN=&LRECL
PUSHING VAR - &LRECL FROM=&LRECL).ERR_LRECL
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  316 OP= PUSHV(&LRECL)='80'
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = NE NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '0' NE '80' = 1
  GEN  PC LOC=  317 OP= COMPNE('0','80')=1
EXP OPS=2 VARS=2 PREV OP = AND NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 14 PREV CLASS = 12 NEXT CLASS = 4
POP OP=AND
AND 0 = 0 AND 1
  GEN  PC LOC=  318 OP= AND(0,1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  319 OP= AIF(0)=.ERR_LRECL NO BRANCH
DCB          98                  AGO   .CHKEND
 
DCB         104                  AIF   ('&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN=&DDNAME
PUSHING VAR - &DDNAME FROM=&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  320 OP= PUSHV(&DDNAME)='SYSIN'
STRING CONCAT - &DDNAME = SYSIN FROM=&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='' OR '&DSNAME' EQ '0').DSNOK
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=OR
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = OR
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 13
POP OP=EQ
COMPARE 'SYSIN' EQ '' = 0
  GEN  PC LOC=  321 OP= COMPEQ('SYSIN','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = OR
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 13
PUSHING OP - OR FROM=R '&DSNAME' EQ '0').DSNOK
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = OR NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 8
PUSHING OP - ' FROM='&DSNAME' EQ '0').DSNOK
EXP TOKEN=&DSNAME
PUSHING VAR - &DSNAME FROM=&DSNAME' EQ '0').DSNOK
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  322 OP= PUSHV(&DSNAME)='0'
STRING CONCAT - &DSNAME = 0 FROM=&DSNAME' EQ '0').DSNOK
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=2 VARS=2 PREV OP = OR NEXT OP = EQ
EXP OPS=2 VARS=2 ACTION = 3 PREV CLASS = 13 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '0').DSNOK
EXP TOKEN= 
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = EQ NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='0').DSNOK
EXP TOKEN=0
EXP TOKEN='
EXP OPS=4 VARS=3 PREV OP = ' NEXT OP = '
EXP OPS=4 VARS=3 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=3 VARS=3 PREV OP = EQ NEXT OP = )
EXP OPS=3 VARS=3 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '0' EQ '0' = 1
  GEN  PC LOC=  323 OP= COMPEQ('0','0')=1
EXP OPS=2 VARS=2 PREV OP = OR NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 15 PREV CLASS = 13 NEXT CLASS = 4
POP OP=OR
OR 1 = 0 OR 1
  GEN  PC LOC=  324 OP= OR(0,1)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  325 OP= AIF(1)=.DSNOK BRANCH
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBID-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         108                  ORG   &N+DCBID-IHADCB        RPI88
DCB         108  (12/108)+         ORG   SYSIN+DCBID-IHADCB        RPI88
DCB         109  (12/109)+         DC    C'DCBV1001'            RPI88
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDSORG-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         110                  ORG   &N+DCBDSORG-IHADCB
DCB         110  (12/110)+         ORG   SYSIN+DCBDSORG-IHADCB
EXP TOKEN=&DSORG
PUSHING VAR - &DSORG FROM=&DSORG)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         111                  DC    AL1(DCBDSORG_&DSORG) DCBDSORG
DCB         111  (12/111)+         DC    AL1(DCBDSORG_PS) DCBDSORG
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBEODAD-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         112                  ORG   &N+DCBEODAD-IHADCB
DCB         112  (12/112)+         ORG   SYSIN+DCBEODAD-IHADCB
EXP TOKEN=&EODAD
PUSHING VAR - &EODAD FROM=&EODAD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         113                  DC    A(&EODAD) DCBEODAD
DCB         113  (12/113)+         DC    A(EOFSYSIN) DCBEODAD
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBRECFM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         114                  ORG   &N+DCBRECFM-IHADCB
DCB         114  (12/114)+         ORG   SYSIN+DCBRECFM-IHADCB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         115                  DC    AL1(DCBRECFM_&RECFM) DCBRECFM
DCB         115  (12/115)+         DC    AL1(DCBRECFM_FT) DCBRECFM
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDDNAM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         116                  ORG   &N+DCBDDNAM-IHADCB
DCB         116  (12/116)+         ORG   SYSIN+DCBDDNAM-IHADCB
DCB         117                  AIF   ('&DDNAME' EQ '').DDDEF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&DDNAME' EQ '').DDDEF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&DDNAME' EQ '').DDDEF
EXP TOKEN=&DDNAME
PUSHING VAR - &DDNAME FROM=&DDNAME' EQ '').DDDEF
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  326 OP= PUSHV(&DDNAME)='SYSIN'
STRING CONCAT - &DDNAME = SYSIN FROM=&DDNAME' EQ '').DDDEF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').DDDEF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').DDDEF
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'SYSIN' EQ '' = 0
  GEN  PC LOC=  327 OP= COMPEQ('SYSIN','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  328 OP= AIF(0)=.DDDEF NO BRANCH
EXP TOKEN=&DDNAME
PUSHING VAR - &DDNAME FROM=&DDNAME'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         118                  DC    CL8'&DDNAME' DCBDDNAM
DCB         118  (12/118)+         DC    CL8'SYSIN' DCBDDNAM
DCB         119                  AGO   .DDEND
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBOFLGS-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         123                  ORG   &N+DCBOFLGS-IHADCB
DCB         123  (12/123)+         ORG   SYSIN+DCBOFLGS-IHADCB
DCB         124  (12/124)+         DC    AL1(0) DCBOFLGS RPI 668 ZERO (SET AT OPEN)
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBMACRF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         125                  ORG   &N+DCBMACRF-IHADCB
DCB         125  (12/125)+         ORG   SYSIN+DCBMACRF-IHADCB
DCB         126                  AIF   (N'&MACRF GT 1).MACRF2 RPI 668
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&MACRF GT 1).MACRF2 RPI 668
EXP TOKEN=N'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&MACRF GT 1).MACRF2 RPI 668
EXP TOKEN=&MACRF
PUSHING VAR - &MACRF FROM=&MACRF GT 1).MACRF2 RPI 668
 MZ390 CALLING AZ390 SYM LOCK
  GEN  PC LOC=  329 OP= PUSHV(&MACRF)='GL'
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=2 VARS=1 PREV OP = N' NEXT OP = GT
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=  330 OP= N'('GL')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T 1).MACRF2 RPI 668
EXP TOKEN= 
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 1 GT 1 = 0
  GEN  PC LOC=  331 OP= COMPGT(1,1)=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=  332 OP= AIF(0)=.MACRF2 NO BRANCH
EXP TOKEN=&MACRF
PUSHING VAR - &MACRF FROM=&MACRF(1))
PUSHING OP - ) FROM=(1))
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=1 VARS=2 PREV OP = ) NEXT OP = )
EXP OPS=1 VARS=2 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=GL
POP OP=)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         127                  DC    AL2(DCBMACRF_&MACRF(1)) DCBMACRF
DCB         127  (12/127)+         DC    AL2(DCBMACRF_GL) DCBMACRF
DCB         128                  AGO   .MACRF2_END
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBSYNAD-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         132                  ORG   &N+DCBSYNAD-IHADCB
DCB         132  (12/132)+         ORG   SYSIN+DCBSYNAD-IHADCB
EXP TOKEN=&SYNAD
PUSHING VAR - &SYNAD FROM=&SYNAD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         133                  DC    A(&SYNAD) DCBSYNAD DCBSYNAD
DCB         133  (12/133)+         DC    A(0) DCBSYNAD DCBSYNAD
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBBLKSIF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         134                  ORG   &N+DCBBLKSIF-IHADCB    RPI 587
DCB         134  (12/134)+         ORG   SYSIN+DCBBLKSIF-IHADCB    RPI 587
EXP TOKEN=&BLKSIZE
PUSHING VAR - &BLKSIZE FROM=&BLKSIZE'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         135                  DC    F'&BLKSIZE' DCBBLKSIF  RPI 587
DCB         135  (12/135)+         DC    F'0' DCBBLKSIF  RPI 587
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBLRECLF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         136                  ORG   &N+DCBLRECLF-IHADCB    RPI 587
DCB         136  (12/136)+         ORG   SYSIN+DCBLRECLF-IHADCB    RPI 587
EXP TOKEN=&LRECL
PUSHING VAR - &LRECL FROM=&LRECL'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         137                  DC    F'&LRECL' DCBLRECLF    RPI 587
DCB         137  (12/137)+         DC    F'80' DCBLRECLF    RPI 587
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBREC-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         138                  ORG   &N+DCBREC-IHADCB
DCB         138  (12/138)+         ORG   SYSIN+DCBREC-IHADCB
EXP TOKEN=&RECORD
PUSHING VAR - &RECORD FROM=&RECORD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         139                  DC    A(&RECORD) DCBREC
DCB         139  (12/139)+         DC    A(0) DCBREC
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDSNAM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         140                  ORG   &N+DCBDSNAM-IHADCB
DCB         140  (12/140)+         ORG   SYSIN+DCBDSNAM-IHADCB
EXP TOKEN=&DSNAME
PUSHING VAR - &DSNAME FROM=&DSNAME)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         141                  DC    A(&DSNAME) DCBDSNAM
DCB         141  (12/141)+         DC    A(0) DCBDSNAM
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDCBE-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         142                  ORG   &N+DCBDCBE-IHADCB   RPI 281
DCB         142  (12/142)+         ORG   SYSIN+DCBDCBE-IHADCB   RPI 281
EXP TOKEN=&DCBE
PUSHING VAR - &DCBE FROM=&DCBE)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         143                  DC    A(&DCBE) DCBDCBE
DCB         143  (12/143)+         DC    A(0) DCBDCBE
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBIO-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         144                  ORG   &N+DCBIO-IHADCB     RPI 907
DCB         144  (12/144)+         ORG   SYSIN+DCBIO-IHADCB     RPI 907
DCB         145  (12/145)+         DC    A(0)     DCBIO      RPI 907 TOTAL IO COUNT SINCE OPEN
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBLEN
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         146                  ORG   &N+DCBLEN
DCB         146  (12/146)+         ORG   SYSIN+DCBLEN
DCB         148  (12/148)+*MCALL #=    12 LV= 2          DCBD 
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
DCBD         28                  GBLB  &Z390_DCBD                       RPI 591
EXP TOKEN=&Z390_DCBD
PUSHING VAR - &Z390_DCBD FROM=&Z390_DCBD                       RPI 591
DCBD         29                  GBLC  &Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE  RPI 591
DCBD         30                  AIF   (&Z390_DCBD).EXIT                RPI 591
  EXEC PC LOC=   93 OP= PUSHV(&Z390_DCBD)=1
  EXEC PC LOC=   94 OP= AIF(1)=.EXIT BRANCH
 
DCBD         30           (6/29)+*MEXIT #=    12 LV= 2 DCBD
DCB         149                  MEXIT
 
DCB         149  (12/149)+*MEXIT #=    11 LV= 1 DCB
OPEN CODE    27    (1/27) *MCALL #=    13 LV= 1 SYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,RECFM=FT,LRECL=80
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
define type M macro label for SYSOUT
 MZ390 CALLING AZ390 SYM LOCK
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB          49   (12/49)+SYSOUT   DS    0D             RPI 915
DCB          50   (12/50)+         DC    XL(DCBLEN)'00' RPI 946
DCB          51         &NPOS    SETA  N'&SYSLIST
  EXEC PC LOC=  256 OP= PUSHV(&SYSLIST)='SYSOUT'
  EXEC PC LOC=  257 OP= N'('GL')=0
LCLA &NPOS(1)
SETA LCLA &NPOS(1)= 0
  EXEC PC LOC=  258 OP= STORV(&NPOS)=0
DCB          53                  AIF   (&NPOS EQ 0).POSEND
  EXEC PC LOC=  259 OP= PUSHV(&NPOS)=0
COMPARE 0 ~ 0 = 1
  EXEC PC LOC=  260 OP= COMPEQ(0,0)=1
  EXEC PC LOC=  261 OP= AIF(1)=.POSEND BRANCH
 
DCB          58                  AIF   ('&DEVD'   NE '').ERR2
  EXEC PC LOC=  262 OP= PUSHV(&DEVD)=''
COMPARE '' ~ '' = 0
  EXEC PC LOC=  263 OP= COMPNE('','')=0
  EXEC PC LOC=  264 OP= AIF(0)=.ERR2 NO BRANCH
DCB          59                  AIF   ('&EXLST'  EQ '').NO_EXLST
  EXEC PC LOC=  265 OP= PUSHV(&EXLST)=''
COMPARE '' ~ '' = 1
  EXEC PC LOC=  266 OP= COMPEQ('','')=1
  EXEC PC LOC=  267 OP= AIF(1)=.NO_EXLST BRANCH
 
DCB          62                  AIF   ('&KEYLEN' NE '').ERR4
  EXEC PC LOC=  268 OP= PUSHV(&KEYLEN)=''
COMPARE '' ~ '' = 0
  EXEC PC LOC=  269 OP= COMPNE('','')=0
  EXEC PC LOC=  270 OP= AIF(0)=.ERR4 NO BRANCH
DCB          63                  AIF   ('&RECFM' EQ 'F').CHKF
  EXEC PC LOC=  271 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'F' = 0
  EXEC PC LOC=  272 OP= COMPEQ('FT','F')=0
  EXEC PC LOC=  273 OP= AIF(0)=.CHKF NO BRANCH
DCB          64                  AIF   ('&RECFM' EQ 'FA').CHKF
  EXEC PC LOC=  274 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FA' = 0
  EXEC PC LOC=  275 OP= COMPEQ('FT','FA')=0
  EXEC PC LOC=  276 OP= AIF(0)=.CHKF NO BRANCH
DCB          65                  AIF   ('&RECFM' EQ 'FM').CHKF
  EXEC PC LOC=  277 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FM' = 0
  EXEC PC LOC=  278 OP= COMPEQ('FT','FM')=0
  EXEC PC LOC=  279 OP= AIF(0)=.CHKF NO BRANCH
DCB          66                  AIF   ('&RECFM' EQ 'FB').CHKFB
  EXEC PC LOC=  280 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FB' = 0
  EXEC PC LOC=  281 OP= COMPEQ('FT','FB')=0
  EXEC PC LOC=  282 OP= AIF(0)=.CHKFB NO BRANCH
DCB          67                  AIF   ('&RECFM' EQ 'FBA').CHKFB
  EXEC PC LOC=  283 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FBA' = 0
  EXEC PC LOC=  284 OP= COMPEQ('FT','FBA')=0
  EXEC PC LOC=  285 OP= AIF(0)=.CHKFB NO BRANCH
DCB          68                  AIF   ('&RECFM' EQ 'FBM').CHKFB
  EXEC PC LOC=  286 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FBM' = 0
  EXEC PC LOC=  287 OP= COMPEQ('FT','FBM')=0
  EXEC PC LOC=  288 OP= AIF(0)=.CHKFB NO BRANCH
DCB          69                  AIF   ('&RECFM' EQ 'V').CHKV
  EXEC PC LOC=  289 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'V' = 0
  EXEC PC LOC=  290 OP= COMPEQ('FT','V')=0
  EXEC PC LOC=  291 OP= AIF(0)=.CHKV NO BRANCH
DCB          70                  AIF   ('&RECFM' EQ 'VA').CHKV
  EXEC PC LOC=  292 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'VA' = 0
  EXEC PC LOC=  293 OP= COMPEQ('FT','VA')=0
  EXEC PC LOC=  294 OP= AIF(0)=.CHKV NO BRANCH
DCB          71                  AIF   ('&RECFM' EQ 'VM').CHKV
  EXEC PC LOC=  295 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'VM' = 0
  EXEC PC LOC=  296 OP= COMPEQ('FT','VM')=0
  EXEC PC LOC=  297 OP= AIF(0)=.CHKV NO BRANCH
DCB          72                  AIF   ('&RECFM' EQ 'VB').CHKVB
  EXEC PC LOC=  298 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'VB' = 0
  EXEC PC LOC=  299 OP= COMPEQ('FT','VB')=0
  EXEC PC LOC=  300 OP= AIF(0)=.CHKVB NO BRANCH
DCB          73                  AIF   ('&RECFM' EQ 'VBA').CHKVB
  EXEC PC LOC=  301 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'VBA' = 0
  EXEC PC LOC=  302 OP= COMPEQ('FT','VBA')=0
  EXEC PC LOC=  303 OP= AIF(0)=.CHKVB NO BRANCH
DCB          74                  AIF   ('&RECFM' EQ 'VBM').CHKVB
  EXEC PC LOC=  304 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'VBM' = 0
  EXEC PC LOC=  305 OP= COMPEQ('FT','VBM')=0
  EXEC PC LOC=  306 OP= AIF(0)=.CHKVB NO BRANCH
DCB          75                  AIF   ('&RECFM' EQ 'FT').CHKFT
  EXEC PC LOC=  307 OP= PUSHV(&RECFM)='FT'
COMPARE 'FT' ~ 'FT' = 1
  EXEC PC LOC=  308 OP= COMPEQ('FT','FT')=1
  EXEC PC LOC=  309 OP= AIF(1)=.CHKFT BRANCH
 
DCB          97                  AIF   (&LRECL GT 0 AND &BLKSIZE GT 0 AND &BLKSIZE NE &LRECL).ERR_LRECL
  EXEC PC LOC=  310 OP= PUSHV(&LRECL)='80'
COMPARE 80 ~ 0 = 1
  EXEC PC LOC=  311 OP= COMPGT(80,0)=1
  EXEC PC LOC=  312 OP= PUSHV(&BLKSIZE)='0'
COMPARE 0 ~ 0 = 0
  EXEC PC LOC=  313 OP= COMPGT(0,0)=0
AND 0 = 1 AND 0
  EXEC PC LOC=  314 OP= AND(1,0)=0
  EXEC PC LOC=  315 OP= PUSHV(&BLKSIZE)='0'
  EXEC PC LOC=  316 OP= PUSHV(&LRECL)='80'
COMPARE '0' ~ '80' = 1
  EXEC PC LOC=  317 OP= COMPNE('0','80')=1
AND 0 = 0 AND 1
  EXEC PC LOC=  318 OP= AND(0,1)=0
  EXEC PC LOC=  319 OP= AIF(0)=.ERR_LRECL NO BRANCH
DCB          98                  AGO   .CHKEND
 
DCB         104                  AIF   ('&DDNAME' EQ '' OR '&DSNAME' EQ '0').DSNOK
  EXEC PC LOC=  320 OP= PUSHV(&DDNAME)='SYSOUT'
COMPARE 'SYSOUT' ~ '' = 0
  EXEC PC LOC=  321 OP= COMPEQ('SYSOUT','')=0
  EXEC PC LOC=  322 OP= PUSHV(&DSNAME)='0'
COMPARE '0' ~ '0' = 1
  EXEC PC LOC=  323 OP= COMPEQ('0','0')=1
OR 1 = 0 OR 1
  EXEC PC LOC=  324 OP= OR(0,1)=1
  EXEC PC LOC=  325 OP= AIF(1)=.DSNOK BRANCH
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBID-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         108                  ORG   &N+DCBID-IHADCB        RPI88
DCB         108  (12/108)+         ORG   SYSOUT+DCBID-IHADCB        RPI88
DCB         109  (12/109)+         DC    C'DCBV1001'            RPI88
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDSORG-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         110                  ORG   &N+DCBDSORG-IHADCB
DCB         110  (12/110)+         ORG   SYSOUT+DCBDSORG-IHADCB
EXP TOKEN=&DSORG
PUSHING VAR - &DSORG FROM=&DSORG)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         111                  DC    AL1(DCBDSORG_&DSORG) DCBDSORG
DCB         111  (12/111)+         DC    AL1(DCBDSORG_PS) DCBDSORG
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBEODAD-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         112                  ORG   &N+DCBEODAD-IHADCB
DCB         112  (12/112)+         ORG   SYSOUT+DCBEODAD-IHADCB
EXP TOKEN=&EODAD
PUSHING VAR - &EODAD FROM=&EODAD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         113                  DC    A(&EODAD) DCBEODAD
DCB         113  (12/113)+         DC    A(0) DCBEODAD
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBRECFM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         114                  ORG   &N+DCBRECFM-IHADCB
DCB         114  (12/114)+         ORG   SYSOUT+DCBRECFM-IHADCB
EXP TOKEN=&RECFM
PUSHING VAR - &RECFM FROM=&RECFM)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         115                  DC    AL1(DCBRECFM_&RECFM) DCBRECFM
DCB         115  (12/115)+         DC    AL1(DCBRECFM_FT) DCBRECFM
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDDNAM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         116                  ORG   &N+DCBDDNAM-IHADCB
DCB         116  (12/116)+         ORG   SYSOUT+DCBDDNAM-IHADCB
DCB         117                  AIF   ('&DDNAME' EQ '').DDDEF
  EXEC PC LOC=  326 OP= PUSHV(&DDNAME)='SYSOUT'
COMPARE 'SYSOUT' ~ '' = 0
  EXEC PC LOC=  327 OP= COMPEQ('SYSOUT','')=0
  EXEC PC LOC=  328 OP= AIF(0)=.DDDEF NO BRANCH
EXP TOKEN=&DDNAME
PUSHING VAR - &DDNAME FROM=&DDNAME'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         118                  DC    CL8'&DDNAME' DCBDDNAM
DCB         118  (12/118)+         DC    CL8'SYSOUT' DCBDDNAM
DCB         119                  AGO   .DDEND
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBOFLGS-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         123                  ORG   &N+DCBOFLGS-IHADCB
DCB         123  (12/123)+         ORG   SYSOUT+DCBOFLGS-IHADCB
DCB         124  (12/124)+         DC    AL1(0) DCBOFLGS RPI 668 ZERO (SET AT OPEN)
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBMACRF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         125                  ORG   &N+DCBMACRF-IHADCB
DCB         125  (12/125)+         ORG   SYSOUT+DCBMACRF-IHADCB
DCB         126                  AIF   (N'&MACRF GT 1).MACRF2 RPI 668
  EXEC PC LOC=  329 OP= PUSHV(&MACRF)='PM'
  EXEC PC LOC=  330 OP= N'('PM')=1
COMPARE 1 ~ 1 = 0
  EXEC PC LOC=  331 OP= COMPGT(1,1)=0
  EXEC PC LOC=  332 OP= AIF(0)=.MACRF2 NO BRANCH
EXP TOKEN=&MACRF
PUSHING VAR - &MACRF FROM=&MACRF(1))
PUSHING OP - ) FROM=(1))
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=1 VARS=2 PREV OP = ) NEXT OP = )
EXP OPS=1 VARS=2 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=PM
POP OP=)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         127                  DC    AL2(DCBMACRF_&MACRF(1)) DCBMACRF
DCB         127  (12/127)+         DC    AL2(DCBMACRF_PM) DCBMACRF
DCB         128                  AGO   .MACRF2_END
 
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBSYNAD-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         132                  ORG   &N+DCBSYNAD-IHADCB
DCB         132  (12/132)+         ORG   SYSOUT+DCBSYNAD-IHADCB
EXP TOKEN=&SYNAD
PUSHING VAR - &SYNAD FROM=&SYNAD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         133                  DC    A(&SYNAD) DCBSYNAD DCBSYNAD
DCB         133  (12/133)+         DC    A(0) DCBSYNAD DCBSYNAD
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBBLKSIF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         134                  ORG   &N+DCBBLKSIF-IHADCB    RPI 587
DCB         134  (12/134)+         ORG   SYSOUT+DCBBLKSIF-IHADCB    RPI 587
EXP TOKEN=&BLKSIZE
PUSHING VAR - &BLKSIZE FROM=&BLKSIZE'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         135                  DC    F'&BLKSIZE' DCBBLKSIF  RPI 587
DCB         135  (12/135)+         DC    F'0' DCBBLKSIF  RPI 587
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBLRECLF-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         136                  ORG   &N+DCBLRECLF-IHADCB    RPI 587
DCB         136  (12/136)+         ORG   SYSOUT+DCBLRECLF-IHADCB    RPI 587
EXP TOKEN=&LRECL
PUSHING VAR - &LRECL FROM=&LRECL'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         137                  DC    F'&LRECL' DCBLRECLF    RPI 587
DCB         137  (12/137)+         DC    F'80' DCBLRECLF    RPI 587
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBREC-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         138                  ORG   &N+DCBREC-IHADCB
DCB         138  (12/138)+         ORG   SYSOUT+DCBREC-IHADCB
EXP TOKEN=&RECORD
PUSHING VAR - &RECORD FROM=&RECORD)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         139                  DC    A(&RECORD) DCBREC
DCB         139  (12/139)+         DC    A(0) DCBREC
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDSNAM-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         140                  ORG   &N+DCBDSNAM-IHADCB
DCB         140  (12/140)+         ORG   SYSOUT+DCBDSNAM-IHADCB
EXP TOKEN=&DSNAME
PUSHING VAR - &DSNAME FROM=&DSNAME)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         141                  DC    A(&DSNAME) DCBDSNAM
DCB         141  (12/141)+         DC    A(0) DCBDSNAM
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBDCBE-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         142                  ORG   &N+DCBDCBE-IHADCB   RPI 281
DCB         142  (12/142)+         ORG   SYSOUT+DCBDCBE-IHADCB   RPI 281
EXP TOKEN=&DCBE
PUSHING VAR - &DCBE FROM=&DCBE)
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         143                  DC    A(&DCBE) DCBDCBE
DCB         143  (12/143)+         DC    A(0) DCBDCBE
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBIO-IHADCB
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         144                  ORG   &N+DCBIO-IHADCB     RPI 907
DCB         144  (12/144)+         ORG   SYSOUT+DCBIO-IHADCB     RPI 907
DCB         145  (12/145)+         DC    A(0)     DCBIO      RPI 907 TOTAL IO COUNT SINCE OPEN
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N+DCBLEN
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
DCB         146                  ORG   &N+DCBLEN
DCB         146  (12/146)+         ORG   SYSOUT+DCBLEN
DCB         148  (12/148)+*MCALL #=    14 LV= 2          DCBD 
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
 
DCBD         28                  GBLB  &Z390_DCBD                       RPI 591
EXP TOKEN=&Z390_DCBD
PUSHING VAR - &Z390_DCBD FROM=&Z390_DCBD                       RPI 591
DCBD         29                  GBLC  &Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
EXP TOKEN=&Z390_DCBD_NAME
PUSHING VAR - &Z390_DCBD_NAME FROM=&Z390_DCBD_NAME,&Z390_DCBD_TYPE  RPI 591
EXP TOKEN=&Z390_DCBD_TYPE
PUSHING VAR - &Z390_DCBD_TYPE FROM=&Z390_DCBD_TYPE  RPI 591
DCBD         30                  AIF   (&Z390_DCBD).EXIT                RPI 591
  EXEC PC LOC=   93 OP= PUSHV(&Z390_DCBD)=1
  EXEC PC LOC=   94 OP= AIF(1)=.EXIT BRANCH
 
DCBD         30           (6/29)+*MEXIT #=    14 LV= 2 DCBD
DCB         149                  MEXIT
 
DCB         149  (12/149)+*MEXIT #=    13 LV= 1 DCB
OPEN CODE    29    (1/29) SAVE     DC    18F'0'                  MODULENS EGEN SAVE-AREA
OPEN CODE    30    (1/30) TEST     DC    CL80'HEJHHEJ'
OPEN CODE    31    (1/31) *MCALL #=    15 LV= 1 OUTAREA  WTO   'xxxxxxxxxxxxxxxx',MF=L
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
define type M macro label for OUTAREA
 MZ390 CALLING AZ390 SYM LOCK
 
WTO          34                  AIF   ('&N' EQ '').SKIPDS
  EXEC PC LOC=  136 OP= PUSHV(&N)='OUTAREA'
COMPARE 'OUTAREA' ~ '' = 0
  EXEC PC LOC=  137 OP= COMPEQ('OUTAREA','')=0
  EXEC PC LOC=  138 OP= AIF(0)=.SKIPDS NO BRANCH
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          35    (8/35)+OUTAREA  DS    0H
WTO          37                  AIF   (N'&SYSLIST LE 1).NPOK
  EXEC PC LOC=  139 OP= PUSHV(&SYSLIST)='OUTAREA'
  EXEC PC LOC=  140 OP= N'('OUTAREA')=1
COMPARE 1 ~ 1 = 1
  EXEC PC LOC=  141 OP= COMPLE(1,1)=1
  EXEC PC LOC=  142 OP= AIF(1)=.NPOK BRANCH
 
WTO          41                  AIF   ('&MF' NE 'I').MF
  EXEC PC LOC=  143 OP= PUSHV(&MF)='L'
COMPARE 'L' ~ 'I' = 1
  EXEC PC LOC=  144 OP= COMPNE('L','I')=1
  EXEC PC LOC=  145 OP= AIF(1)=.MF BRANCH
 
WTO          57                  AIF   ('&MF' EQ 'L').MFL
  EXEC PC LOC=  146 OP= PUSHV(&MF)='L'
COMPARE 'L' ~ 'L' = 1
  EXEC PC LOC=  147 OP= COMPEQ('L','L')=1
  EXEC PC LOC=  148 OP= AIF(1)=.MFL BRANCH
 
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX._EOT-*,0),C&MSG
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MSG
PUSHING VAR - &MSG FROM=&MSG
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          69                  DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSG
WTO          69    (8/69)+         DC    AL2(WTO#0015_EOT-*,0),C'xxxxxxxxxxxxxxxx'
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX._EOT
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          70    (8/70)+WTO#0015_EOT     EQU *
WTO          71                  MEXIT
 
WTO          71    (8/71)+*MEXIT #=    15 LV= 1 WTO
OPEN CODE    33    (1/33)          END 
MZ390I total mnote warnings  = 0
MZ390I total mnote errors    = 0
MZ390I max   mnote level     = 0
MZ390I total mz390 errors    = 0
MZ390I total az390 errors    = 1
00:06:05 program   MZ390 ENDED   RC=12 SEC= 0 MEM(MB)= 61 IO=1992
